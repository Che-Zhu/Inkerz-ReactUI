{"version":3,"sources":["components/Header.js","components/LoadControl.js","components/ExportControl.js","components/ResetControl.js","components/Main3DView.js","components/TextEngraving.js","components/CaseColourPicker.js","components/CaseSelection.js","App.js","index.js"],"names":["Header","react_default","a","createElement","className","src","alt","href","LoadControl","state","file","handleFiles","files","console","log","base64","react_file_reader_default","fileTypes","this","Component","ExportControl","props","onChange","on3DFormatSelect","value","export_3d_formats","map","format","key","ResetControl","onClick","onResetApp","Main3DView","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","start","bind","assertThisInitialized","stop","animate","width","mount","clientWidth","height","clientHeight","scene","THREE","camera","renderer","antialias","position","z","setClearColor","setSize","appendChild","domElement","removeChild","frameId","requestAnimationFrame","cancelAnimationFrame","renderScene","window","render","_this2","style","ref","app_states","chosen_engraved_text","chosen_case_colour","chosen_phone_case","chosen_export_3d_format","TextEngraving","htmlFor","id","onEngraveTextChange","engraved","placeholder","CaseColourPicker","lib","disableAlpha","color","updated_case_colour","onChangeComplete","onCaseColourSelect","CaseSelection2","caseList","searchString","handleChange","resetSearch","refs","search","focus","setState","case_list","trim","currentState","length","filter","phone_case","includes","type","backgroundImage","concat","onCaseSelect","App","available_export_3d_formats","available_case_models","update3DExportFormat","updateEngravingText","updateCaseColour","updateChosenCase","resetApp","e","target","hex","components_Header","components_LoadControl","components_ResetControl","components_ExportControl","chosen_3d_format","CaseSelection","components_Main3DView","components_TextEngraving","components_CaseColourPicker","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.42164caf.chunk.js","sourcesContent":["/*THis componenet renders vanilla header with logo and links */\r\n\r\nimport React from 'react';\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"logo\">\r\n                <img src=\"images/logo_white.png\" alt=\"Inkerz Logo\"></img>\r\n            </div>\r\n            <div className=\"nav-links\">\r\n                <a href=\"index.html\">3D MODELER</a>\r\n                <a href=\"index.html\">WHY INKERZ?</a>\r\n                <a href=\"index.html\">CONTACT</a>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Header","/*This component controls the 3D file loading. */\r\n\r\nimport React, { Component } from 'react'\r\nimport ReactFileReader from 'react-file-reader';\r\n\r\nclass LoadControl extends Component {\r\n    state = {\r\n        file : \"\"\r\n      }\r\n    handleFiles = files => {\r\n        console.log(files.base64)  //This is  base64 token of the file user uploaded, you can think it as a binary file\r\n        //DataFor3DView = files.base64  //The value of this variable needs to be passed to Main3DView.js\r\n      }\r\n\r\nrender() {\r\n    return (\r\n        <div className=\"load-control\">\r\n            {/* NEEDS a function to load 3D model bound in App.js!!!! */}\r\n\r\n        <ReactFileReader fileTypes={[\".obj\", \".json\"]} base64={true} handleFiles={this.handleFiles}>\r\n            <button className=\"button-3d\">Load 3D Model</button>\r\n        </ReactFileReader>\r\n            \r\n        </div >\r\n    )\r\n}\r\n}\r\n\r\nexport default LoadControl","/*This component controls the 3D export format selection and export action.\r\nonChange={props.on3DFormatSelect} updates App.js chosen_export_3d_format value*/\r\n\r\nimport React from 'react';\r\n\r\nfunction ExportControl(props) {\r\n    return (\r\n        <div className=\"export-control\">\r\n            <select className=\"select-3d\" onChange={props.on3DFormatSelect}>\r\n                <option value=\"\">Select Format</option>\r\n                {props.export_3d_formats.map((format) => (\r\n                    <option key={format} value={format} >.{format}</option>\r\n                ))}\r\n            </select>\r\n            {/* NEEDS a function to export 3D model bound in App.js!!!! */}\r\n            <button className=\"button-3d\">Export 3D Model</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ExportControl","/* This componenet resets all the relevant values modified by the user\r\nreseting the modifiable values in App.js (states) */\r\n\r\nimport React from 'react';\r\n\r\nfunction ResetControl(props) {\r\n    return (\r\n\r\n        <div className=\"reset-control\">\r\n            <button className=\"button-3d\" onClick={props.onResetApp}>Reset</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResetControl","/*This compoinent is main ThreeJS viewer, displaying the 3D model and\r\nupdating any changes to said model */\r\n\r\nimport React, { Component } from 'react'\r\nimport * as THREE from 'three'\r\n\r\n\r\nclass Main3DView extends Component {\r\n    constructor(props) {\r\n      super(props)\r\n  \r\n      this.start = this.start.bind(this)\r\n      this.stop = this.stop.bind(this)\r\n      this.animate = this.animate.bind(this)\r\n    }\r\n  \r\n    componentDidMount() { // HTML DOM\r\n      const width = this.mount.clientWidth\r\n      const height = this.mount.clientHeight\r\n  \r\n      const scene = new THREE.Scene()\r\n      const camera = new THREE.PerspectiveCamera(\r\n        75,\r\n        width / height,\r\n        0.1,\r\n        1000\r\n      )\r\n      \r\n      const renderer = new THREE.WebGLRenderer({ antialias: true })\r\n\r\n  \r\n      camera.position.z = 4\r\n\r\n      renderer.setClearColor('#000000')\r\n      renderer.setSize(width, height)\r\n  \r\n      this.scene = scene\r\n      this.camera = camera\r\n      this.renderer = renderer\r\n\r\n  \r\n      this.mount.appendChild(this.renderer.domElement)\r\n      this.start()\r\n    }\r\n  \r\n    componentWillUnmount() {\r\n      this.stop()\r\n      this.mount.removeChild(this.renderer.domElement)\r\n    }\r\n  \r\n    start() {\r\n      if (!this.frameId) {\r\n        this.frameId = requestAnimationFrame(this.animate)\r\n      }\r\n    }\r\n  \r\n    stop() {\r\n      cancelAnimationFrame(this.frameId)\r\n    }\r\n  \r\n    animate() {\r\n\r\n  \r\n      this.renderScene()\r\n      this.frameId = window.requestAnimationFrame(this.animate)\r\n    }\r\n  \r\n    renderScene() {\r\n      this.renderer.render(this.scene, this.camera)\r\n    }\r\n  \r\n    render(props) {\r\n      return (\r\n        <div>\r\n            <div\r\n                style={{ width: \"100%\", height: '400px' }}\r\n                ref={(mount) => { this.mount = mount }}\r\n            />\r\n            <div>  {/* These data will be hidden or displayed in colsole for debug purpose, once the preview is fully functioning */}\r\n                <p>Integrate Three.js Viewer TBA!</p>\r\n                <p>Application State Checker (Troubleshooting/Remove in Final!)</p>\r\n                <p>Chosen Engraved Text: {this.props.app_states.chosen_engraved_text}</p>\r\n                <p>Chosen Case Colour: {this.props.app_states.chosen_case_colour}</p>\r\n                <p>Chosen Phone Case: {this.props.app_states.chosen_phone_case}</p>\r\n                <p>Chosen Save 3D Format: {this.props.app_states.chosen_export_3d_format}</p>\r\n\r\n            </div>\r\n\r\n        </div>\r\n        \r\n      )\r\n    }\r\n  }\r\nexport default Main3DView","/* This component controls the input of the engraving text for the chosen case.\r\n onChange={props.onEngraveTextChange} updates the chosen_engraved_text in App.js*/\r\n\r\nimport React from 'react';\r\n\r\nfunction TextEngraving(props) {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <label htmlFor=\"text-to-engrave\">\r\n                    <p>What to engrave into case?</p>\r\n                </label>\r\n                <input\r\n                    id=\"text-to-engrave\"\r\n                    className=\"search-3d\"\r\n                    onChange={props.onEngraveTextChange}\r\n                    value={props.engraved} placeholder=\"Text to Engrave\"\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default TextEngraving","/*This component embeds the colour wheen into the page (color-picker module). \r\nonChangeComplete={props.onCaseColourSelect} updates the chosen_case_colour state*/\r\n\r\nimport React from 'react';\r\nimport { SketchPicker } from 'react-color'\r\n\r\nfunction CaseColourPicker(props) {\r\n    return (\r\n        <div>\r\n            {/* Colour Picker section */}\r\n            <p>Pick Case Colour: </p>\r\n            <SketchPicker\r\n                disableAlpha={true}\r\n                width={190}\r\n                color={props.updated_case_colour}\r\n                onChangeComplete={props.onCaseColourSelect} /* updated App.js state of chosen_case_colour */\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CaseColourPicker","/* This compoenet (a class) uses case list (available_case_models)\r\nfrom App.js in building a searchable text input, for user to find\r\na case to model.\r\n\r\nIt uses states to manipulate case list array, for showing and filtering.\r\n\r\nthis.props.onCaseSelect(phone_case) function updates the chosen_phone_case\r\nproperty in App.js (state)\r\n\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\n\r\nclass CaseSelection2 extends Component {\r\n    /*class constructor */\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        /* App state*/\r\n        this.state = {\r\n            caseList: [],\r\n            searchString: ''\r\n        }\r\n        /* local function bind to class local context */\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.resetSearch = this.resetSearch.bind(this)\r\n    }\r\n    /* lifecycle stage when component loaded */\r\n    componentDidMount() {\r\n        /* focus on seach button when componenet loaded */\r\n        this.refs.search.focus();\r\n    }\r\n\r\n    /* handles changes when user types the search */\r\n    handleChange() {\r\n        /* first, reset the state to starting point before filtering (load all cases)\r\n        this is important when searchString is being deleted (back space) */\r\n        this.setState({\r\n            caseList: this.props.case_list\r\n        })\r\n\r\n        /* set state of search String to changed value from input text*/\r\n        this.setState({\r\n            searchString: this.refs.search.value.trim(),\r\n\r\n        })\r\n        /* filter current state of caseList based on seach being present,\r\n        showing only results matching the searched letters in case name*/\r\n        this.setState((currentState) => {\r\n            /* we only want to action (filter results) if someting is typed in to be searched */\r\n            if (currentState.searchString.length > 0) {\r\n                return {\r\n                    /* updates (filters) caseList with only array elements matching the searchString value */\r\n                    caseList: currentState.caseList.filter((phone_case) => phone_case.includes(currentState.searchString))\r\n                }\r\n            }\r\n            else {\r\n                /* if there is no search term typed, reset to empty list (hide)*/\r\n                return {\r\n                    caseList: []\r\n                }\r\n            }\r\n        })\r\n    }\r\n    /* reset the search String and case list to none (nothing to view)*/\r\n    resetSearch() {\r\n        this.setState({\r\n            searchString: '',\r\n            caseList: []\r\n        })\r\n    }\r\n    /* what getrs shown in the component (render) */\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                {/* search text field */}\r\n                <div>\r\n                    Search for Phone Case to Model:\r\n                     <input type=\"text\"\r\n                        className=\"search-3d\"\r\n                        value={this.state.searchString}\r\n                        ref=\"search\"\r\n                        onChange={this.handleChange}\r\n                        placeholder=\"example: iphone\">\r\n                    </input>\r\n                    <input type=\"button\" className=\"button-3d\" onClick={this.resetSearch} value=\"Clear\"></input>\r\n                    {/* caseList - show/renders cases with background photo and button name/value*/}\r\n                </div>\r\n                {\r\n                    this.state.caseList.map((phone_case) => (\r\n                        <button className=\"displayCaseButton\"\r\n                            key={phone_case}\r\n                            style={{ backgroundImage: `url(images/${phone_case}.png)` }}\r\n                            value={phone_case}\r\n                            /* onClick both updates the case selection and resets/clears the search (hides resuts)*/\r\n                            onClick={() => { this.props.onCaseSelect(phone_case); this.resetSearch() }}>\r\n                            <p>{phone_case}</p>\r\n                        </button>\r\n                    ))\r\n                }\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default CaseSelection2\r\n","import React, { Component } from 'react';\r\nimport Header from './components/Header'\r\nimport LoadControl from './components/LoadControl'\r\nimport ExportControl from './components/ExportControl'\r\nimport ResetControl from './components/ResetControl'\r\nimport Main3DView from './components/Main3DView'\r\nimport TextEngraving from './components/TextEngraving'\r\nimport CaseColourPicker from './components/CaseColourPicker'\r\nimport CaseSelection from './components/CaseSelection'\r\n\r\nclass App extends Component {\r\n  /* Constructor */\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    /* App state*/\r\n    this.state = {\r\n      chosen_engraved_text: '',\r\n      chosen_case_colour: '',\r\n      chosen_phone_case: '',\r\n      chosen_export_3d_format: '',\r\n      available_export_3d_formats: ['STL', 'OBJ', 'AFM', '3FM'],\r\n      available_case_models: ['iphone6.1', 'iphone6.2', 'iphone6.3', 'ipad2.1', 'galaxyS9.1', 'galaxyS9.2', 'pixel2XL.1'],\r\n    }\r\n\r\n    /* section to bind functions to local class context */\r\n    this.update3DExportFormat = this.update3DExportFormat.bind(this)\r\n    this.updateEngravingText = this.updateEngravingText.bind(this)\r\n    this.updateCaseColour = this.updateCaseColour.bind(this)\r\n    this.updateChosenCase = this.updateChosenCase.bind(this)\r\n    this.resetApp = this.resetApp.bind(this)\r\n  }\r\n  /* Updates chosen_export_3d_format App state property based on return \r\n  event target value*/\r\n  update3DExportFormat(e) {\r\n    this.setState({ chosen_export_3d_format: e.target.value })\r\n  }\r\n  /* Resets App to chosen default values (empty) */\r\n  resetApp() {\r\n    this.setState({\r\n      chosen_engraved_text: '',\r\n      chosen_case_colour: '',\r\n      chosen_export_3d_format: '',\r\n      chosen_phone_case: '',\r\n    })\r\n  }\r\n\r\n  updateEngravingText(e) {\r\n    this.setState({ chosen_engraved_text: e.target.value })\r\n  }\r\n\r\n  updateCaseColour(color) {\r\n    this.setState({ chosen_case_colour: color.hex })\r\n  }\r\n\r\n  updateChosenCase(e) {\r\n    this.setState({ chosen_phone_case: e })\r\n  }\r\n\r\n  /* App JSX render section. Works together with index.css in\r\n  producing a layout (based on grid css*/\r\n  render() {\r\n    return (\r\n      <div className=\"app\" >\r\n        <Header />\r\n        <div className=\"top-controls\">\r\n          <LoadControl />\r\n          <ResetControl onResetApp={this.resetApp} />\r\n          <ExportControl\r\n            export_3d_formats={this.state.available_export_3d_formats}\r\n            chosen_3d_format={this.state.chosen_export_3d_format}\r\n            on3DFormatSelect={this.update3DExportFormat}\r\n          />\r\n        </div>\r\n        <div className=\"view3d\">\r\n          <CaseSelection\r\n            onCaseSelect={this.updateChosenCase}\r\n            case_list={this.state.available_case_models}\r\n          />\r\n          <Main3DView app_states={this.state} />\r\n        </div>\r\n        <div className=\"edit-controls\">\r\n          <TextEngraving\r\n            engraved={this.state.chosen_engraved_text}\r\n            onEngraveTextChange={this.updateEngravingText}\r\n          />\r\n          <CaseColourPicker\r\n            onCaseColourSelect={this.updateCaseColour}\r\n            updated_case_colour={this.state.chosen_case_colour}\r\n          />\r\n        </div>\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\n/* Export App */\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}