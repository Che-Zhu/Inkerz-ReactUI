{"version":3,"sources":["components/Header.js","components/LoadControl.js","components/ExportControl.js","components/ResetControl.js","components/Main3DView.js","components/TextEngraving.js","components/CaseColourPicker.js","components/CaseSelection.js","App.js","index.js"],"names":["Header","react_default","a","createElement","className","src","alt","href","LoadControl","state","file","fileExtension","handleFiles","console","log","fileList","name","split","pop","base64","_this","setState","props","on3DFileLoad","react_file_reader_default","fileTypes","this","Component","ExportControl","onChange","on3DFormatSelect","value","export_3d_formats","map","format","key","ResetControl","onClick","onResetApp","OBJLoader","THREE","Main3DView","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","start","bind","assertThisInitialized","stop","animate","insertObject","previous","width","mount","clientWidth","height","clientHeight","scene","camera","renderer","antialias","position","z","setClearColor","setSize","appendChild","domElement","removeChild","currentComponent","app_states","chosen_3d_file_to_load","chosen_3d_file_extension","loader","load","obj","add","object","renderScene","frameId","requestAnimationFrame","cancelAnimationFrame","window","render","_this2","style","ref","chosen_engraved_text","chosen_case_colour","chosen_phone_case","chosen_export_3d_format","TextEngraving","htmlFor","id","onEngraveTextChange","engraved","placeholder","CaseColourPicker","lib","disableAlpha","color","updated_case_colour","onChangeComplete","onCaseColourSelect","CaseSelection","caseList","searchString","handleChange","resetSearch","refs","search","focus","case_list","trim","currentState","length","filter","phone_case","includes","type","backgroundImage","concat","onCaseSelect","App","available_export_3d_formats","available_case_models","update3DExportFormat","updateEngravingText","updateCaseColour","updateChosenCase","updateChosen3DFileToLoad","resetApp","e","target","hex","components_Header","components_LoadControl","components_ResetControl","components_ExportControl","chosen_3d_format","components_CaseSelection","components_Main3DView","components_TextEngraving","components_CaseColourPicker","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.b7d5eb4e.chunk.js","sourcesContent":["/*THis componenet renders vanilla header with logo and links */\r\n\r\nimport React from 'react';\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"logo\">\r\n                <img src=\"images/logo_white.png\" alt=\"Inkerz Logo\"></img>\r\n            </div>\r\n            <div className=\"nav-links\">\r\n                <a href=\"index.html\">3D MODELER</a>\r\n                <a href=\"index.html\">WHY INKERZ?</a>\r\n                <a href=\"index.html\">CONTACT</a>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Header","/*This component controls the 3D file loading. */\r\n\r\nimport React, { Component } from 'react'\r\nimport ReactFileReader from 'react-file-reader';\r\n\r\nclass LoadControl extends Component {\r\n\r\n    state = {\r\n        file: \"\",\r\n        fileExtension: \"\"\r\n    }\r\n    handleFiles = file => {\r\n        console.log(file.fileList[0].name.split('.').pop())\r\n        console.log(file.base64) /* remove just for logging */\r\n        this.setState({\r\n            file: file.base64,\r\n            fileExtension: file.fileList[0].name.split('.').pop()\r\n        })\r\n\r\n        this.props.on3DFileLoad(this.state.file, this.state.fileExtension) /*load file upstream to App.js */\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"load-control\">\r\n                {/* NEEDS a function to load 3D model bound in App.js!!!! */}\r\n\r\n                <ReactFileReader fileTypes={[\".obj\", \".json\"]} base64={true} handleFiles={this.handleFiles}>\r\n                    <button className=\"button-3d\">Load 3D Model</button>\r\n                </ReactFileReader>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoadControl","/*This component controls the 3D export format selection and export action.\r\nonChange={props.on3DFormatSelect} updates App.js chosen_export_3d_format value*/\r\n\r\nimport React from 'react';\r\n\r\nfunction ExportControl(props) {\r\n    return (\r\n        <div className=\"export-control\">\r\n            <select className=\"select-3d\" onChange={props.on3DFormatSelect}>\r\n                <option value=\"\">Select Format</option>\r\n                {props.export_3d_formats.map((format) => (\r\n                    <option key={format} value={format} >.{format}</option>\r\n                ))}\r\n            </select>\r\n            {/* NEEDS a function to export 3D model bound in App.js!!!! */}\r\n            <button className=\"button-3d\">Export 3D Model</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ExportControl","/* This componenet resets all the relevant values modified by the user\r\nreseting the modifiable values in App.js (states) */\r\n\r\nimport React from 'react';\r\n\r\nfunction ResetControl(props) {\r\n    return (\r\n\r\n        <div className=\"reset-control\">\r\n            <button className=\"button-3d\" onClick={props.onResetApp}>Reset</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResetControl","/*This compoinent is main ThreeJS viewer, displaying the 3D model and\r\nupdating any changes to said model */\r\n\r\nimport React, { Component } from 'react'\r\nimport * as THREE from 'three'\r\nimport OBJLoader from 'three-obj-loader';\r\nOBJLoader(THREE);\r\n\r\n\r\nclass Main3DView extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.start = this.start.bind(this)\r\n    this.stop = this.stop.bind(this)\r\n    this.animate = this.animate.bind(this)\r\n    this.insertObject = this.insertObject.bind(this)\r\n  }\r\n\r\n  componentDidMount() { // HTML DOM\r\n    var previous\r\n    this.previous = previous\r\n    const width = this.mount.clientWidth\r\n    const height = this.mount.clientHeight\r\n\r\n    const scene = new THREE.Scene()\r\n    const camera = new THREE.PerspectiveCamera(\r\n      75,\r\n      width / height,\r\n      0.1,\r\n      1000\r\n    )\r\n\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true })\r\n\r\n    camera.position.z = 4\r\n\r\n    renderer.setClearColor('#ffffff')\r\n    renderer.setSize(width, height)\r\n\r\n    this.scene = scene\r\n    this.camera = camera\r\n    this.renderer = renderer\r\n\r\n    this.mount.appendChild(this.renderer.domElement)\r\n\r\n    this.start()\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.stop()\r\n    this.mount.removeChild(this.renderer.domElement)\r\n  }\r\n\r\n  insertObject () {\r\n    this.THREE = THREE;\r\n    let currentComponent = this;\r\n    if (this.props.app_states.chosen_3d_file_to_load !== \"Something is wrong if this text displays\" && this.props.app_states.chosen_3d_file_to_load !== this.previous) {\r\n      this.previous = this.props.app_states.chosen_3d_file_to_load\r\n      if (this.props.app_states.chosen_3d_file_extension === 'json') {\r\n        var loader = new THREE.ObjectLoader();\r\n        loader.load(this.props.app_states.chosen_3d_file_to_load,\r\n        function(obj){\r\n          currentComponent.scene.add(obj)\r\n        })\r\n      }\r\n\r\n      if (this.props.app_states.chosen_3d_file_extension === 'obj') {\r\n        loader = new this.THREE.OBJLoader();\r\n        loader.load(this.props.app_states.chosen_3d_file_to_load,\r\n        function(object){\r\n          currentComponent.scene.add(object )\r\n          currentComponent.renderScene();\r\n        })\r\n      }\r\n\r\n\r\n    }\r\n  }\r\n\r\n  start() {\r\n    if (!this.frameId) {\r\n      this.frameId = requestAnimationFrame(this.animate)\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    cancelAnimationFrame(this.frameId)\r\n  }\r\n\r\n  animate() {\r\n    this.renderScene()\r\n    this.insertObject()\r\n    this.frameId = window.requestAnimationFrame(this.animate)\r\n  }\r\n\r\n  renderScene() {\r\n    this.renderer.render(this.scene, this.camera)\r\n  }\r\n\r\n  render(props) {\r\n    return (\r\n      <div>\r\n        <div\r\n          style={{ width: \"100%\", height: '400px' }}\r\n          ref={(mount) => { this.mount = mount }}\r\n        />\r\n        <div>  {/* These data will be hidden or displayed in colsole for debug purpose, once the preview is fully functioning */}\r\n          <p>Integrate Three.js Viewer TBA!</p>\r\n          <p>Application State Checker (Troubleshooting/Remove in Final!)</p>\r\n          <p>Chosen Engraved Text: {this.props.app_states.chosen_engraved_text}</p>\r\n          <p>Chosen Case Colour: {this.props.app_states.chosen_case_colour}</p>\r\n          <p>Chosen Phone Case: {this.props.app_states.chosen_phone_case}</p>\r\n          <p>Chosen Save 3D Format: {this.props.app_states.chosen_export_3d_format}</p>\r\n          <p>Chosen Load 3D Format: {this.props.app_states.chosen_3d_file_to_load}</p>\r\n          <p>File extension display test: {this.props.app_states.chosen_3d_file_extension}</p>\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\nexport default Main3DView","/* This component controls the input of the engraving text for the chosen case.\r\n onChange={props.onEngraveTextChange} updates the chosen_engraved_text in App.js*/\r\n\r\nimport React from 'react';\r\n\r\nfunction TextEngraving(props) {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <label htmlFor=\"text-to-engrave\">\r\n                    <p>What to engrave into case?</p>\r\n                </label>\r\n                <input\r\n                    id=\"text-to-engrave\"\r\n                    className=\"search-3d\"\r\n                    onChange={props.onEngraveTextChange}\r\n                    value={props.engraved} placeholder=\"Text to Engrave\"\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default TextEngraving","/*This component embeds the colour wheen into the page (color-picker module). \r\nonChangeComplete={props.onCaseColourSelect} updates the chosen_case_colour state*/\r\n\r\nimport React from 'react';\r\nimport { SketchPicker } from 'react-color'\r\n\r\nfunction CaseColourPicker(props) {\r\n    return (\r\n        <div>\r\n            {/* Colour Picker section */}\r\n            <p>Pick Case Colour: </p>\r\n            <SketchPicker\r\n                disableAlpha={true}\r\n                width={190}\r\n                color={props.updated_case_colour}\r\n                onChangeComplete={props.onCaseColourSelect} /* updated App.js state of chosen_case_colour */\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CaseColourPicker","/* This compoenet (a class) uses case list (available_case_models)\r\nfrom App.js in building a searchable text input, for user to find\r\na case to model.\r\n\r\nIt uses states to manipulate case list array, for showing and filtering.\r\n\r\nthis.props.onCaseSelect(phone_case) function updates the chosen_phone_case\r\nproperty in App.js (state)\r\n\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\n\r\nclass CaseSelection extends Component {\r\n    /*class constructor */\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        /* App state*/\r\n        this.state = {\r\n            caseList: [],\r\n            searchString: ''\r\n        }\r\n        /* local function bind to class local context */\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.resetSearch = this.resetSearch.bind(this)\r\n    }\r\n    /* lifecycle stage when component loaded */\r\n    componentDidMount() {\r\n        /* focus on seach button when componenet loaded */\r\n        this.refs.search.focus();\r\n    }\r\n\r\n    /* handles changes when user types the search */\r\n    handleChange() {\r\n        /* first, reset the state to starting point before filtering (load all cases)\r\n        this is important when searchString is being deleted (back space) */\r\n        this.setState({\r\n            caseList: this.props.case_list\r\n        })\r\n\r\n        /* set state of search String to changed value from input text*/\r\n        this.setState({\r\n            searchString: this.refs.search.value.trim(),\r\n\r\n        })\r\n        /* filter current state of caseList based on seach being present,\r\n        showing only results matching the searched letters in case name*/\r\n        this.setState((currentState) => {\r\n            /* we only want to action (filter results) if someting is typed in to be searched */\r\n            if (currentState.searchString.length > 0) {\r\n                return {\r\n                    /* updates (filters) caseList with only array elements matching the searchString value */\r\n                    caseList: currentState.caseList.filter((phone_case) => phone_case.includes(currentState.searchString))\r\n                }\r\n            }\r\n            else {\r\n                /* if there is no search term typed, reset to empty list (hide)*/\r\n                return {\r\n                    caseList: []\r\n                }\r\n            }\r\n        })\r\n    }\r\n    /* reset the search String and case list to none (nothing to view)*/\r\n    resetSearch() {\r\n        this.setState({\r\n            searchString: '',\r\n            caseList: []\r\n        })\r\n    }\r\n    /* what getrs shown in the component (render) */\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                {/* search text field */}\r\n                <div>\r\n                    Search for Phone Case to Model:\r\n                     <input type=\"text\"\r\n                        className=\"search-3d\"\r\n                        value={this.state.searchString}\r\n                        ref=\"search\"\r\n                        onChange={this.handleChange}\r\n                        placeholder=\"example: iphone\">\r\n                    </input>\r\n                    <input type=\"button\" className=\"button-3d\" onClick={this.resetSearch} value=\"Clear\"></input>\r\n                    {/* caseList - show/renders cases with background photo and button name/value*/}\r\n                </div>\r\n                {\r\n                    this.state.caseList.map((phone_case) => (\r\n                        <button className=\"displayCaseButton\"\r\n                            key={phone_case}\r\n                            style={{ backgroundImage: `url(images/${phone_case}.png)` }}\r\n                            value={phone_case}\r\n                            /* onClick both updates the case selection and resets/clears the search (hides resuts)*/\r\n                            onClick={() => { this.props.onCaseSelect(phone_case); this.resetSearch() }}>\r\n                            <p>{phone_case}</p>\r\n                        </button>\r\n                    ))\r\n                }\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default CaseSelection\r\n","import React, { Component } from 'react';\r\nimport Header from './components/Header'\r\nimport LoadControl from './components/LoadControl'\r\nimport ExportControl from './components/ExportControl'\r\nimport ResetControl from './components/ResetControl'\r\nimport Main3DView from './components/Main3DView'\r\nimport TextEngraving from './components/TextEngraving'\r\nimport CaseColourPicker from './components/CaseColourPicker'\r\nimport CaseSelection from './components/CaseSelection'\r\n\r\nclass App extends Component {\r\n  /* Constructor */\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    /* App state*/\r\n    this.state = {\r\n      chosen_engraved_text: '',\r\n      chosen_case_colour: '',\r\n      chosen_phone_case: '',\r\n      chosen_export_3d_format: '',\r\n      chosen_3d_file_to_load: 'Something is wrong if this text displays',\r\n      chosen_3d_file_extension: '',\r\n      available_export_3d_formats: ['STL', 'OBJ', 'AFM', '3FM'],\r\n      available_case_models: ['iphone6.1', 'iphone6.2', 'iphone6.3', 'ipad2.1', 'galaxyS9.1', 'galaxyS9.2', 'pixel2XL.1'],\r\n    }\r\n\r\n    /* section to bind functions to local class context */\r\n    this.update3DExportFormat = this.update3DExportFormat.bind(this)\r\n    this.updateEngravingText = this.updateEngravingText.bind(this)\r\n    this.updateCaseColour = this.updateCaseColour.bind(this)\r\n    this.updateChosenCase = this.updateChosenCase.bind(this)\r\n    this.updateChosen3DFileToLoad = this.updateChosen3DFileToLoad.bind(this)\r\n    this.resetApp = this.resetApp.bind(this)\r\n\r\n  }\r\n  /* Updates chosen_export_3d_format App state property based on return \r\n  event target value*/\r\n  update3DExportFormat(e) {\r\n    this.setState({ chosen_export_3d_format: e.target.value })\r\n  }\r\n  /* Resets App to chosen default values (empty) */\r\n  resetApp() {\r\n    this.setState({\r\n      chosen_engraved_text: '',\r\n      chosen_case_colour: '',\r\n      chosen_export_3d_format: '',\r\n      chosen_phone_case: '',\r\n    })\r\n  }\r\n\r\n  updateEngravingText(e) {\r\n    this.setState({ chosen_engraved_text: e.target.value })\r\n  }\r\n\r\n  updateCaseColour(color) {\r\n    this.setState({ chosen_case_colour: color.hex })\r\n  }\r\n\r\n  updateChosenCase(e) {\r\n    this.setState({ chosen_phone_case: e })\r\n  }\r\n\r\n  updateChosen3DFileToLoad(file, fileExtension) {\r\n    this.setState({ chosen_3d_file_to_load: file })\r\n    this.setState({ chosen_3d_file_extension: fileExtension})\r\n  }\r\n\r\n  /* App JSX render section. Works together with index.css in\r\n  producing a layout (based on grid css*/\r\n  render() {\r\n    return (\r\n      <div className=\"app\" >\r\n        <Header />\r\n        <div className=\"top-controls\">\r\n          <LoadControl on3DFileLoad={this.updateChosen3DFileToLoad} />\r\n          <ResetControl onResetApp={this.resetApp} />\r\n          <ExportControl\r\n            export_3d_formats={this.state.available_export_3d_formats}\r\n            chosen_3d_format={this.state.chosen_export_3d_format}\r\n            on3DFormatSelect={this.update3DExportFormat}\r\n          />\r\n        </div>\r\n        <div className=\"view3d\">\r\n          <CaseSelection\r\n            onCaseSelect={this.updateChosenCase}\r\n            case_list={this.state.available_case_models}\r\n          />\r\n          <Main3DView app_states={this.state} />\r\n        </div>\r\n        <div className=\"edit-controls\">\r\n          <TextEngraving\r\n            engraved={this.state.chosen_engraved_text}\r\n            onEngraveTextChange={this.updateEngravingText}\r\n          />\r\n          <CaseColourPicker\r\n            onCaseColourSelect={this.updateCaseColour}\r\n            updated_case_colour={this.state.chosen_case_colour}\r\n          />\r\n        </div>\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\n/* Export App */\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}