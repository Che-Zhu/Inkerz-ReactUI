{"version":3,"sources":["components/ExportControl.js","components/Header.js","components/LoadControl.js","components/ResetControl.js","components/DemoScene/index.js","components/Main3DView.js","components/TextEngraving.js","components/CaseColourPicker.js","components/CaseSelection.js","components/SearchControl.js","App.js","registerServiceWorker.js","index.js"],"names":["ExportControl","obj_text","lines","split","result","i","mtllib_line","usemtl_line","length","undefined","startsWith","data","obj_parse_pointer","this_pointer","file_name","hex","obj_info","is_empty","Object","entries","constructor","obj_file_name","mtl_file_name","material_name","endsWith","trim","zip","AdmZip","content","addFile","Buffer","alloc","mtl_content","rgb","props","chosen_case_colour","exec","r","parseInt","g","b","substr","file","File","toBuffer","type","FileSaver","saveAs","this","chosen_3d_format","handle_data_pointer","handle_data","obj_parse","chosen_phone_case","indexOf","obj_base64","atob","url","console","log","window","location","pathname","fetch","then","response","text","alert","_this","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","onChange","on3DFormatSelect","value","style","backgroundImage","backgroundRepeat","export_3d_formats","map","format","key","ref","onClick","clickHandler","React","Component","Header","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","showMenu","bind","assertThisInitialized","closeMenu","event","_this2","preventDefault","setState","document","addEventListener","_this3","dropdownMenu","contains","target","removeEventListener","_this4","react_default","src","alt","href","element","LoadControl","fileExtension","mtl_parse","mtl_text","materials","next_name","next_color","substring","JSON","stringify","on_obj_load","e","btoa","obj_reader","step","on3DFileLoad","color","app_states","on_mtl_load","mtl_string","mtl_reader","colors","rgb_parts","j","Math","round","parseFloat","toString","handleFiles","files","mtl_ready","obj_ready","obj_order","mtl_order","name","pop","FileReader","onloadend","readAsText","react_file_reader_default","fileTypes","multipleFiles","base64","ResetControl","onResetApp","DemoScene","cameraPosition","THREE","groupRotation","scene","width","height","RenderInfo","assets_path","chosenPhoneCase","refs","resize","innerWidth","React3_default","mainCamera","antialias","shadowMapEnabled","alpha","fov","chosenCaseSize","aspect","near","far","position","lookAt","chosenCaseColor","castShadow","penumbra","intensity","shadowMapWidth","shadowMapHeight","rotation","chosenRotationX","chosenRotationY","build_default","model","objectLoadLogic","group","objectLabelDisplayLogic","Main3DView","caseSize","rotationX","rotationY","getElementById","id","min","max","defaultValue","changeSize","components_DemoScene","changeRotationX","changeRotationY","TextEngraving","htmlFor","onEngraveTextChange","engraved","placeholder","CaseColourPicker","displayColorPicker","updated_case_colour","handleClick","handleClose","handleChange","styles","reactCSS","default","borderRadius","background","swatch","padding","boxShadow","display","cursor","popover","zIndex","cover","top","right","bottom","left","react_color_lib","disableAlpha","onChangeComplete","onCaseColourSelect","CaseSelection","caseList","case_list","searchString","filter","phone_case","toLowerCase","includes","searched","onCaseSelect","onClear","SeachControl","onCaseSearch","App","chosen_engraved_text","case_search_string","chosen_export_3d_format","chosen_3d_file_extension","available_export_3d_formats","available_case_models","update3DExportFormat","updateEngravingText","updateCaseColour","updateChosenCase","updateChosen3DFileToLoad","resetApp","updateSearchString","clearSearchString","components_Header","components_LoadControl","components_ResetControl","SearchControl","components_CaseSelection","components_Main3DView","components_TextEngraving","components_CaseColourPicker","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App","URL","process","origin","concat","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.161efbd3.chunk.js","sourcesContent":["/*This component controls the 3D export format selection and export action.\r\nonChange={props.on3DFormatSelect} updates App.js chosen_export_3d_format value*/\r\n\r\nimport React from 'react';\r\nimport AdmZip from 'adm-zip'\r\nimport FileSaver from 'file-saver'\r\n// var AdmZip = require('adm-zip');\r\n\r\n\r\n\r\nclass ExportControl extends React.Component {\r\n    //constructor(props) {\r\n    //    super(props)\r\n    //}\r\n\r\n\r\n    // extracts the material library and the name of material used\r\n    // within the .obj file\r\n    // this is used in handle_data() function\r\n    obj_parse(obj_text) {\r\n\r\n        let lines = obj_text.split('\\n')\r\n\r\n        let result = {}\r\n        let i = 0\r\n        let mtllib_line = ''\r\n        let usemtl_line = ''\r\n\r\n        while (i < lines.length) {\r\n            while (i < lines.length) {\r\n                if (lines[i] === undefined) {\r\n                    break\r\n                }\r\n                if (lines[i].startsWith('mtllib')) {\r\n                    mtllib_line = lines[i]\r\n                    break\r\n                }\r\n                else {\r\n                    i++\r\n                    continue\r\n                }\r\n            }\r\n            if (mtllib_line !== -1) {\r\n                while (i < lines.length) {\r\n                    if (lines[i] === undefined) {\r\n                        break\r\n                    }\r\n                    if (lines[i].startsWith('usemtl')) {\r\n                        usemtl_line = lines[i]\r\n                        break\r\n                    }\r\n                    else {\r\n                        i++\r\n                        continue\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                break\r\n            }\r\n            if (mtllib_line.length !== 0 && usemtl_line.length !== 0) {\r\n                result['mtllib_line'] = mtllib_line\r\n                result['usemtl_line'] = usemtl_line\r\n                return result\r\n            }\r\n            else {\r\n                return result\r\n            }\r\n        }\r\n        return result\r\n    }\r\n\r\n    handle_data(data, obj_parse_pointer, this_pointer, file_name) {\r\n\r\n        let obj_info = obj_parse_pointer(data)\r\n\r\n        // console.log(obj_info)\r\n\r\n        let is_empty = Object.entries(obj_info).length === 0 && obj_info.constructor === Object\r\n\r\n        // prepare files to be exported (obj and mtl placeholders)\r\n        let obj_file_name = file_name\r\n        let mtl_file_name = ''\r\n        let material_name = ''\r\n\r\n        // form the obj file name\r\n        if (!obj_file_name.endsWith('.obj')) {\r\n            obj_file_name = obj_file_name + '.obj'\r\n        }\r\n\r\n        //convert the hex colour tracked by the App.js (chosen_case_colour)\r\n        // to RGB space, as .mtl file only hold the material colour\r\n        // as RGB colour\r\n        function hexToRgb(hex) {\r\n            var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n            return result ? {\r\n                r: parseInt(result[1], 16),\r\n                g: parseInt(result[2], 16),\r\n                b: parseInt(result[3], 16)\r\n            } : null;\r\n        }\r\n\r\n        // if we dont have an mtl file, we need to create one\r\n        // this entire function is to:\r\n        // - create the mtl file structure\r\n        // - create a zip file\r\n        // - load both mtl and obj files into zip\r\n        // - save the files using FileSaver module to user file system\r\n\r\n        // if we have an obj file and is not empty (protection agains empty download)\r\n        if (!is_empty) {\r\n            // console.log(obj_info.mtllib_line)\r\n            // console.log(obj_info.usemtl_line)\r\n            // console.log(this_pointer.props.chosen_case_colour)\r\n\r\n            // prep the file naming of obj and mtl files\r\n            // based on obj files lines containing reference to material and\r\n            // material library used (research obj file format for understanding)\r\n            mtl_file_name = obj_info.mtllib_line.split('mtllib')[1].trim()\r\n            material_name = obj_info.usemtl_line.split('usemtl')[1].trim()\r\n\r\n            // prepare zip object\r\n            var zip = new AdmZip();\r\n\r\n            // prepare and append .obj file\r\n            var content = data;\r\n            zip.addFile(obj_file_name, Buffer.alloc(content.length, content), \"\");\r\n\r\n            // create new .mtl file to accompany .obj file\r\n            // .mtl file we use App.js chose_case_colour property\r\n            // as converted to rgb\r\n            let mtl_content = ''\r\n            mtl_content += 'newmtl '\r\n            mtl_content += material_name\r\n            mtl_content += '\\n'\r\n            mtl_content += 'Ns 225.000000\\n'\r\n            mtl_content += 'Ka 1.000000 1.000000 1.000000\\n'\r\n            mtl_content += 'Kd '//0.800000 0.777799 0.285769\\n'\r\n            let rgb = hexToRgb(this_pointer.props.chosen_case_colour)\r\n            mtl_content += ('' + rgb.r / 255).substr(0, 8)\r\n            mtl_content += ' '\r\n            mtl_content += ('' + rgb.g / 255).substr(0, 8)\r\n            mtl_content += ' '\r\n            mtl_content += ('' + rgb.b / 255).substr(0, 8)\r\n            mtl_content += '\\n'\r\n            mtl_content += 'Ks 0.500000 0.500000 0.500000\\n'\r\n            mtl_content += 'Ke 0.0 0.0 0.0\\n'\r\n            mtl_content += 'Ni 1.450000\\n'\r\n            mtl_content += 'd 1.000000\\n'\r\n            mtl_content += 'illum 2\\n'\r\n\r\n            // add .mtl file to zip\r\n            zip.addFile(mtl_file_name, Buffer.alloc(mtl_content.length, mtl_content), \"\")\r\n\r\n            // create a file to save as zip file\r\n            // var FileSaver = require('file-saver');\r\n            var file = new File([zip.toBuffer()], \"inkerz_exported_3d_model.zip\", { type: \"text/plain;charset=utf-8\" });\r\n\r\n            // save it to user's default download location (please note: not prompt is supplied)\r\n            FileSaver.saveAs(file);\r\n\r\n        }\r\n\r\n    }\r\n    // when user click to export/save the edited 3D model to local file system\r\n    clickHandler() {\r\n        // exoport is restricted to .obj file type (until more 3d file exporters are developed)\r\n        if (this.props.chosen_3d_format === 'OBJ') {\r\n\r\n            var obj_text = ''\r\n\r\n            var handle_data_pointer = this.handle_data\r\n            var obj_parse_pointer = this.obj_parse\r\n            var this_pointer = this\r\n\r\n            // if we canread the base64 model ascii phone case data (obj URI encoded)\r\n            // as stored in App.js chosen_phone_case property\r\n            if (this.props.chosen_phone_case.indexOf(\"base64\") > 0) {\r\n                // read the pure ascii (removing the header)\r\n                let obj_base64 = this.props.chosen_phone_case.split('base64,')[1]\r\n                // convert the text to object type (ascii to binary)\r\n                obj_text = atob(obj_base64)\r\n                // send it off to be handled via handle_data() function\r\n                handle_data_pointer(obj_text, obj_parse_pointer, this_pointer, 'model.obj')\r\n            }\r\n            else {\r\n                // otherwise, as not having the ascii version of object file means we have just loded the obj file from\r\n                // server, we need to fetch said server data (in our case our own url, where the assets are)\r\n                let url = 'assets/' + this.props.chosen_phone_case + \".obj\"\r\n                 console.log(\"url is\", url)\r\n                 console.log(\"pathname\", window.location.pathname)\r\n                // fetch is used \r\n                fetch(url)\r\n                    .then(function (response) {\r\n                        //to extract the text from it\r\n                        return response.text();\r\n                    })\r\n                    .then(function (data) {\r\n                        // send for post processing and download \r\n                        handle_data_pointer(data, obj_parse_pointer, this_pointer, this_pointer.props.chosen_phone_case)\r\n                    })\r\n            }\r\n        }\r\n        else {\r\n            alert(\"Export format currently not supported!\")\r\n        }\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"export-control\">\r\n                <select className=\"select-3d\" onChange={this.props.on3DFormatSelect} value={this.props.chosen_3d_format} style={{\r\n                    backgroundImage: \"url(images/select-arrow.png)\",\r\n                    backgroundRepeat: 'no-repeat'\r\n                }}>\r\n                    <option value=\"\">Export Format</option>\r\n                    {this.props.export_3d_formats.map((format) => (\r\n                        <option key={format} value={format} >.{format}</option>\r\n                    ))}\r\n                </select>\r\n                <button ref=\"download\" className=\"exportButton\" onClick={() => this.clickHandler()}>Export 3D Model</button>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ExportControl\r\n","/*THis componenet renders vanilla header with logo and links \r\n\r\nDrop down menu for small screen devices uses this example\r\nhttps://blog.campvanilla.com/reactjs-dropdown-menus-b6e06ae3a8fe\r\nand is modified\r\n*/\r\n\r\nimport React from 'react';\r\n\r\nclass Header extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      showMenu: false,\r\n    };\r\n\r\n    this.showMenu = this.showMenu.bind(this);\r\n    this.closeMenu = this.closeMenu.bind(this);\r\n  }\r\n\r\n  showMenu(event) {\r\n    event.preventDefault();\r\n    this.setState({ showMenu: true }, () => {\r\n      document.addEventListener('click', this.closeMenu);\r\n    });\r\n  }\r\n\r\n  closeMenu(event) {\r\n    if (!this.dropdownMenu.contains(event.target)) {\r\n      this.setState({ showMenu: false }, () => {\r\n        document.removeEventListener('click', this.closeMenu);\r\n      });\r\n\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"header\">\r\n        <div className=\"logo\">\r\n          <img src=\"images/logo_white.png\" alt=\"Inkerz Logo\" className=\"logoImage\"></img>\r\n        </div>\r\n\r\n        <div className=\"nav-links\">\r\n          <a href=\"index.html\">3D MODELER</a>\r\n          <a href=\"https://inkerz.com\">WHY INKERZ?</a>\r\n          <a href=\"https://inkerz.com/contact/\">CONTACT</a>\r\n        </div>\r\n\r\n        <div className=\"menu-division\">\r\n          <img src=\"images/logo_white.png\" alt=\"Inkerz Logo\" className=\"menuLogoImage\"></img>\r\n          <button\r\n            className=\"menu-button\"\r\n            onClick={this.showMenu}\r\n            style={{ backgroundImage: \"url(images/menu-icon.png)\", backgroundRepeat: 'no-repeat' }}>\r\n          </button>\r\n          {\r\n            this.state.showMenu\r\n              ? (\r\n                <div\r\n                  className=\"menu\"\r\n                  ref={(element) => { this.dropdownMenu = element; }}>\r\n                  <a href=\"index.html\">\r\n                    <button className=\"menuItem\">3D MODELER</button>\r\n                  </a>\r\n                  <a href=\"https://inkerz.com\">\r\n                    <button className=\"menuItem\">WHY INKERZ?</button>\r\n                  </a>\r\n                  <a href=\"https://inkerz.com/contact/\">\r\n                    <button className=\"menuItem\">CONTACT</button>\r\n                  </a>\r\n                </div>\r\n              )\r\n              : (\r\n                null\r\n              )\r\n          }\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Header\r\n","/*This component controls the 3D file loading. */\r\n\r\nimport React, { Component } from 'react'\r\nimport ReactFileReader from 'react-file-reader'\r\n\r\nclass LoadControl extends Component {\r\n\r\n    state = {\r\n        file: \"\",\r\n        fileExtension: \"\"\r\n    }\r\n\r\n    // this function extract the colour from the loded mtl file\r\n    // parsing all lines, effectively\r\n    // parsing each line fromm the mtl file format, finding\r\n    // newmtl file: material statement\r\n    // Kd line : color statement\r\n    // see: http://paulbourke.net/dataformats/mtl/\r\n    mtl_parse = mtl_text => {\r\n\r\n        let lines = mtl_text.split('\\n')\r\n\r\n        let materials = {}\r\n\r\n        let i = 0\r\n        let next_name = ''\r\n        let next_color = ''\r\n\r\n        while (i < lines.length) {\r\n            while (i < lines.length) {\r\n                if (lines[i] === undefined) {\r\n                    break\r\n                }\r\n                if (lines[i].startsWith('newmtl')) {\r\n                    next_name = lines[i].substring(6).trim()\r\n                    break\r\n                }\r\n                else {\r\n                    i++\r\n                    continue\r\n                }\r\n            }\r\n            if (next_name.length !== 0) {\r\n                while (i < lines.length) {\r\n                    if (lines[i] === undefined) {\r\n                        break\r\n                    }\r\n                    if (lines[i].startsWith('Kd')) {\r\n                        next_color = lines[i].substring(2).trim()\r\n                        break\r\n                    }\r\n                    else {\r\n                        i++\r\n                        continue\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                i++\r\n                continue\r\n            }\r\n            if (next_name.length !== 0 && next_color.length !== 0) {\r\n                materials[next_name] = next_color + ''\r\n                next_name = ''\r\n                next_color = ''\r\n                i++\r\n                continue\r\n            }\r\n            else {\r\n                i++\r\n                continue\r\n            }\r\n        }\r\n        console.log(JSON.stringify(materials))\r\n        return materials\r\n    }\r\n\r\n    // this function load the dataURI base64 string and forms the complete\r\n    // file definition, to be loaded into App.js on3DFileLoad() bound function\r\n    // note: file extension is fixed currently to obj.\r\n    on_obj_load = e => {\r\n\r\n        this.file = 'data:application/octet-stream;base64,' + btoa(this.obj_reader.result)\r\n        this.fileExtension = 'obj'\r\n\r\n        this.step = this.step + 1\r\n\r\n        //this\r\n        if (this.step >= 2) {\r\n            this.props.on3DFileLoad(this.file, this.fileExtension, this.color) //load file upstream to App.js \r\n        } else {\r\n            this.props.on3DFileLoad(this.file, this.fileExtension, this.props.app_states.chosen_case_colour) //load file upstream to App.js \r\n        }\r\n    }\r\n\r\n    // this function uses the result of read in mtl file read in and \r\n    // for colour and converts it to hex colour (as mtl file contains rgb colour definition)\r\n    // to be sent upstream to App.js on3DFileLoad() bound function together with state of the file\r\n    // and file extention\r\n    on_mtl_load = e => {\r\n\r\n        var mtl_string = this.mtl_reader.result\r\n\r\n        //var this_pointer = this\r\n\r\n\r\n        // console.log('mtl_string: ' + mtl_string)\r\n\r\n        let colors = this.mtl_parse(mtl_string)\r\n\r\n        let is_empty = Object.entries(colors).length === 0 && colors.constructor === Object\r\n\r\n        let color = '#'\r\n\r\n        if (!is_empty) {\r\n            let rgb = Object.entries(colors)[0][1]\r\n            let rgb_parts = rgb.split(' ')\r\n            for (let j = 0; j < 3; j++) {\r\n                color += (Math.round(parseFloat(rgb_parts[j].trim()) * 255) % 256).toString(16)\r\n            }\r\n        }\r\n        else {\r\n            color = '#000000'\r\n        }\r\n\r\n        this.color = color\r\n\r\n        console.log('handleFiles: ' + color)\r\n\r\n\r\n        this.step = this.step + 1\r\n\r\n        //this\r\n        if (this.step >= 2) {\r\n            this.props.on3DFileLoad(this.file, this.fileExtension, this.color) //load file upstream to App.js \r\n        }\r\n    }\r\n    \r\n    // function to handle files when user loads the files\r\n    handleFiles = files => {\r\n        this.step = 0\r\n        this.file = ''\r\n        this.fileExtension = ''\r\n        this.color = ''\r\n\r\n        var mtl_ready = false\r\n        var obj_ready = false\r\n        var obj_order = -1\r\n        var mtl_order = -1\r\n\r\n        // currently we expect both .mtl and .obj files\r\n        if (files.length < 2) {\r\n            //var color = '#'\r\n            // each file is parswed to identifyy extention and make them marked as ready\r\n            for (let i = 0; i < files.length; i++) {\r\n                // console.log(files[i].name)\r\n                // console.log(files[i].name.split('.').pop() === 'mtl' && !mtl_ready)\r\n                // console.log(files[i].name.split('.').pop() === 'obj' && !obj_ready)\r\n                if (files[i].name.split('.').pop() === 'obj' && !obj_ready) {\r\n                    // console.log('obj: ' + files[i].name)\r\n                    //console.log(files[i].base64[i]) /* remove just for logging */\r\n                    obj_order = i;\r\n                    obj_ready = true;\r\n                    alert(\".mtl file has not been loaded, using default material\")\r\n                    continue\r\n                } else {\r\n                    alert(\"Unsupported file detected\")\r\n                }\r\n            }\r\n\r\n            this.obj_reader = new FileReader();\r\n            this.obj_reader.onloadend = this.on_obj_load\r\n            this.obj_reader.readAsText(files[obj_order])\r\n        }\r\n        // if both supplied, process both files (encoding obj file into stream base 64 \r\n        // and extract material reference and colour from mtl file)\r\n        else {\r\n            //var color = '#'\r\n            // each file is parswed to identifyy extention and make them marked as ready\r\n            for (let i = 0; i < files.length; i++) {\r\n                // console.log(files[i].name)\r\n                // console.log(files[i].name.split('.').pop() === 'mtl' && !mtl_ready)\r\n                // console.log(files[i].name.split('.').pop() === 'obj' && !obj_ready)\r\n                if (files[i].name.split('.').pop() === 'obj' && !obj_ready) {\r\n                    // console.log('obj: ' + files[i].name)\r\n                    //console.log(files[i].base64[i]) /* remove just for logging */\r\n                    obj_order = i;\r\n                    obj_ready = true;\r\n                    continue\r\n                }\r\n                if (files[i].name.split('.').pop() === 'mtl' && !mtl_ready) {\r\n                    // console.log('mtl: ' + files[i].name)\r\n                    mtl_order = i;\r\n                    mtl_ready = true;\r\n                }\r\n            }\r\n            // once both files are reqady, they are read in\r\n            this.mtl_reader = new FileReader();\r\n            this.obj_reader = new FileReader();\r\n            // object encoding into base64 stream, and mtl extraction of \r\n            // material and colour\r\n            // this is triggered using the FileLoader ability to\r\n            // load the function on \"onloadend\" trigger event\r\n            //  files as stepped loaded in (.mtl then .obj), read in as text (ascii)\r\n            // then sent off for processing via on_mtl_load and obj_load functions\r\n            this.mtl_reader.onloadend = this.on_mtl_load\r\n            this.obj_reader.onloadend = this.on_obj_load\r\n            this.mtl_reader.readAsText(files[mtl_order])\r\n            this.obj_reader.readAsText(files[obj_order])\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"load-control\">\r\n                <ReactFileReader fileTypes={[\".obj\", \".json\", \".mtl\"]} multipleFiles={true} base64={false} handleFiles={this.handleFiles}>\r\n                    <button className=\"loadButton\">Load 3D Model</button>\r\n                </ReactFileReader>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoadControl\r\n","/* This componenet resets all the relevant values modified by the user\r\nreseting the modifiable values in App.js (states) */\r\n\r\nimport React from 'react';\r\n\r\nfunction ResetControl(props) {\r\n    return (\r\n\r\n        <div className=\"reset-control\">\r\n            <button className=\"resetButton\" onClick={props.onResetApp}>Reset</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResetControl\r\n","/* This component renders case 3D object\r\n\r\nIt uses number of modules for Threejs to make it ewasier to\r\nintegrate React and ThrreJS, namely react-three-renderer as\r\nfor rendering and react-three-renderer-objects for object loading\r\n\r\n*/\r\n\r\nimport * as THREE from \"three\";\r\nimport React from \"react\";\r\nimport React3 from \"react-three-renderer\";\r\nimport ObjectModel from 'react-three-renderer-objects';\r\n\r\n\r\nclass DemoScene extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cameraPosition: new THREE.Vector3(0, 300, 750),\r\n      groupRotation: new THREE.Euler(0, 0, 0),\r\n      scene: {},\r\n      width: 500,\r\n      height: 400,\r\n      RenderInfo: \"\",\r\n      assets_path: \"assets/\"\r\n    }\r\n    // this.objectLoadLogic = this.objectLoadLogic.bind()\r\n  }\r\n\r\n  objectLoadLogic() {\r\n    // if we detect an object as string, with substring base64, then load it as is\r\n    if (this.props.chosenPhoneCase.indexOf(\"base64\") > 0) {\r\n      return this.props.chosenPhoneCase\r\n    }\r\n    // otherwise we need to load it from file system, \r\n    // including the full asset path under public/assets folder\r\n    else {\r\n      return (this.state.assets_path + this.props.chosenPhoneCase + \".obj\")\r\n    }\r\n  }\r\n\r\n  objectLabelDisplayLogic() {\r\n    // if we detect an object as string, with substring base64, mark it with\r\n    // laber of customer loaded\r\n    if (this.props.chosenPhoneCase.indexOf(\"base64\") > 0) {\r\n      return \"Customer\"\r\n    }\r\n    // otherwise we need to load it from file system, \r\n    // including the full asset path under public/assets folder\r\n    // label it as such\r\n    else {\r\n      return this.props.chosenPhoneCase\r\n    }\r\n  }\r\n\r\n  /* when component mounts (renders), we set thescene and track the \r\n  window resize */\r\n  componentDidMount() {\r\n    let { scene } = this.refs;\r\n    this.setState({ scene });\r\n    //detect window resiez and perform resize function\r\n\r\n    this.resize();\r\n\r\n    window.addEventListener(\"resize\", this.resize.bind(this));\r\n  }\r\n\r\n  resize() {\r\n\r\n    if (window.innerWidth < 640) {\r\n      //adjust render size\r\n      this.setState({ width: window.innerWidth * 0.7 });\r\n      this.setState({ height: 300 });\r\n    } else {\r\n      //adjust render size\r\n      this.setState({ width: window.innerWidth - 350 });\r\n      this.setState({ height: 400 });\r\n    }\r\n  }\r\n\r\n  // This is the react rendering the 3D object\r\n  render() {\r\n    return (\r\n      <div>\r\n        <React3\r\n          mainCamera=\"camera\"\r\n          antialias\r\n          shadowMapEnabled\r\n          width={this.state.width}\r\n          height={this.state.height}\r\n          alpha={true}\r\n        >\r\n          <scene ref=\"scene\">\r\n            <perspectiveCamera\r\n              key={`perspectiveCamera`}\r\n              name=\"camera\"\r\n              fov={parseInt(this.props.chosenCaseSize, 10)}\r\n              aspect={this.state.width / this.state.height}\r\n              near={0.1}\r\n              far={1000}\r\n              position={this.state.cameraPosition}\r\n              lookAt={new THREE.Vector3(0, 0, 0)}\r\n            />\r\n            <group>\r\n              <spotLight\r\n                key={`Light 1`}\r\n                color={this.props.chosenCaseColor}\r\n                position={new THREE.Vector3(0, 300, 0)}\r\n                lookAt={new THREE.Vector3(0, 0, 0)}\r\n                castShadow\r\n                penumbra={2}\r\n                intensity={0.2}\r\n                shadowMapWidth={10240}\r\n                shadowMapHeight={10240}\r\n              />\r\n\r\n              <directionalLight\r\n                key={`Light 2`}\r\n                color={this.props.chosenCaseColor}\r\n                position={new THREE.Vector3(0, 500, 100)}\r\n                lookAt={new THREE.Vector3(0, 0, 0)}\r\n                intensity={0.5}\r\n              />\r\n\r\n              <spotLight\r\n                key={`Light 3`}\r\n                color={this.props.chosenCaseColor}\r\n                position={new THREE.Vector3(0, 100, 2000)}\r\n                lookAt={new THREE.Vector3(0, 0, 0)}\r\n                intensity={0.35}\r\n              />\r\n\r\n              <spotLight\r\n                key={`Light 4`}\r\n                color={this.props.chosenCaseColor}\r\n                position={new THREE.Vector3(-500, 0, 500)}\r\n                lookAt={new THREE.Vector3(0, 0, 0)}\r\n                intensity={0.1}\r\n              />\r\n\r\n              <spotLight\r\n                key={`Light 5`}\r\n                color={this.props.chosenCaseColor}\r\n                position={new THREE.Vector3(500, 0, 500)}\r\n                lookAt={new THREE.Vector3(0, 0, 0)}\r\n                intensity={0.1}\r\n              />\r\n\r\n              <spotLight\r\n                key={`Light 6`}\r\n                color={this.props.chosenCaseColor}\r\n                position={new THREE.Vector3(-500, 450, 500)}\r\n                lookAt={new THREE.Vector3(0, 0, 0)}\r\n                intensity={0.375}\r\n              />\r\n\r\n              <spotLight\r\n                key={`Light 7`}\r\n                color={this.props.chosenCaseColor}\r\n                position={new THREE.Vector3(500, 450, 500)}\r\n                lookAt={new THREE.Vector3(0, 0, 0)}\r\n                intensity={0.375}\r\n              />\r\n            </group>\r\n\r\n            <group name=\"objGroup\" rotation={new THREE.Euler(this.props.chosenRotationX, this.props.chosenRotationY, 0)}\r\n              //change key when model changes so that it gets re-rendered\r\n              key={this.props.chosenPhoneCase}>\r\n              <ObjectModel\r\n                name=\"exampleObject\"\r\n                //this is the model we are rendering\r\n                model={this.objectLoadLogic()}\r\n                scene={this.state.scene}\r\n                group=\"objGroup\"\r\n              />\r\n              {/* {console.log(\"model is:\", this.objectLoadLogic())} */}\r\n            </group>\r\n          </scene>\r\n        </React3>\r\n        <div className=\"renderDescription\">\r\n          <p>{\"Rendering \" + this.objectLabelDisplayLogic() + \" Model\"}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DemoScene;\r\n","/* This compoenet (a class) is used as wrapping control section for rotation\r\nand zooming 3D object controls.\r\n\r\nIt paseses the required states from App.js to DemoScene.js (component)\r\nto render the 3D object\r\n\r\nIt passes own control states as well\r\n\r\n*/\r\n\r\nimport React from 'react';\r\nimport DemoScene from './DemoScene';\r\n\r\nclass Main3DView extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        /* App state*/\r\n        this.state = {\r\n            // caseColor: this.props.app_states.chosen_case_colour,\r\n            caseSize: 20,\r\n            rotationX: 0,\r\n            rotationY: 0,\r\n            // PhoneCase: \"iPhone X\",\r\n        }\r\n    }\r\n\r\n    changeSize() {\r\n        let value = document.getElementById(\"caseSizeRange\").value\r\n        this.setState({ caseSize: value })\r\n    }\r\n\r\n    changeRotationX() {\r\n        let value = document.getElementById(\"rotationXRange\").value\r\n        this.setState({ rotationX: value })\r\n    }\r\n\r\n    changeRotationY() {\r\n        let value = document.getElementById(\"rotationYRange\").value\r\n        this.setState({ rotationY: value })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"main3D\">\r\n                <br></br>\r\n                <div className=\"fileViewerLine\">\r\n                    <div className=\"caseSize\">\r\n\r\n                        <p className=\"whiteText\">\r\n\r\n                            Z<br />\r\n                            O<br />\r\n                            O<br />\r\n                            M<br />\r\n                        </p>\r\n\r\n                        <div className=\"rangeDiv\">\r\n                            <input type=\"range\" id=\"caseSizeRange\" min=\"1\" max=\"50\" step=\"1\" defaultValue=\"20\" onChange={() => this.changeSize()} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"fileViewer\" style={{ backgroundImage: \"url(images/model-background.png)\", backgroundRepeat: 'no-repeat' }}>\r\n\r\n                        <DemoScene\r\n                            chosenCaseColor={this.props.app_states.chosen_case_colour}\r\n                            chosenCaseSize={this.state.caseSize}\r\n                            chosenRotationX={this.state.rotationX}\r\n                            chosenRotationY={this.state.rotationY}\r\n                            chosenPhoneCase={this.props.app_states.chosen_phone_case}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"rotationX\">\r\n\r\n                        <div className=\"rangeDiv\">\r\n                            <input type=\"range\" id=\"rotationXRange\" min=\"-3\" max=\"3\" step=\"0.1\" defaultValue=\"0\" onChange={() => this.changeRotationX()} />\r\n                        </div>\r\n                        <p className=\"whiteText\">\r\n\r\n                            R<br />\r\n                            O<br />\r\n                            T<br />\r\n                            A<br />\r\n                            T<br />\r\n                            E<br />\r\n                        </p>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div className=\"rotationY\">\r\n                    <input type=\"range\" id=\"rotationYRange\" min=\"-3\" max=\"3\" step=\"0.1\" defaultValue=\"0\" onChange={() => this.changeRotationY()}></input>\r\n\r\n                    <p className=\"whiteText\">ROTATE</p>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main3DView\r\n","/* This component controls the input of the engraving text for the chosen case.\r\n onChange={props.onEngraveTextChange} updates the chosen_engraved_text in App.js*/\r\n\r\nimport React from 'react';\r\n\r\nfunction TextEngraving(props) {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <label htmlFor=\"text-to-engrave\">\r\n                    <p className=\"whiteText\">What to engrave into case?</p>\r\n                </label>\r\n                <input\r\n                    id=\"text-to-engrave\"\r\n                    className=\"engrave-3d\"\r\n                    onChange={props.onEngraveTextChange}\r\n                    value={props.engraved} placeholder=\"Text to Engrave...\"\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default TextEngraving\r\n","/*This component embeds the colour wheen into the page (color-picker module). \r\nonChangeComplete={props.onCaseColourSelect} updates the chosen_case_colour state\r\nback to App.js*/\r\n\r\n/* example take from https://casesandberg.github.io/react-color/ and modified*/\r\n\r\nimport React from 'react'\r\nimport reactCSS from 'reactcss'\r\nimport { ChromePicker } from 'react-color'\r\n\r\nclass CaseColourPicker extends React.Component {\r\n    state = {\r\n        displayColorPicker: false,\r\n        color: this.props.updated_case_colour\r\n    };\r\n\r\n    handleClick = () => {\r\n        this.setState({ displayColorPicker: !this.state.displayColorPicker })\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({ displayColorPicker: false })\r\n    };\r\n\r\n    handleChange = (color) => {\r\n        this.setState({\r\n            color: color\r\n        })\r\n\r\n    };\r\n\r\n    render() {\r\n\r\n        const styles = reactCSS({\r\n            'default': {\r\n                color: {\r\n                    width: '30px',\r\n                    height: '14px',\r\n                    borderRadius: '2px',\r\n                    background: this.props.updated_case_colour,\r\n                },\r\n                swatch: {\r\n                    padding: '5px',\r\n                    background: '#fff',\r\n                    borderRadius: '1px',\r\n                    boxShadow: '0 0 0 1px rgba(0,0,0,.1)',\r\n                    display: 'inline-block',\r\n                    cursor: 'pointer',\r\n                },\r\n                popover: {\r\n                    position: 'absolute',\r\n                    zIndex: '2',\r\n                },\r\n                cover: {\r\n                    position: 'fixed',\r\n                    top: '0px',\r\n                    right: '0px',\r\n                    bottom: '0px',\r\n                    left: '0px',\r\n                },\r\n            },\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <p className=\"whiteText\">Select Case Colour:</p>\r\n                <div style={styles.swatch} onClick={this.handleClick}>\r\n                    <div style={styles.color} />\r\n                </div>\r\n                {this.state.displayColorPicker ? <div style={styles.popover}>\r\n                    <div style={styles.cover} onClick={this.handleClose} />\r\n                    <ChromePicker\r\n                        disableAlpha={true}\r\n                        width=\"190px\"\r\n                        onChange={this.handleChange}\r\n                        color={this.props.updated_case_colour}\r\n                        onChangeComplete={this.props.onCaseColourSelect}\r\n                    >\r\n                    </ChromePicker>\r\n                </div> : null}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CaseColourPicker\r\n","/* This compoenet (a class) uses case list (available_case_models)\r\nfrom App.js in building a searchable text input, for user to find\r\na case to model.\r\n\r\nIt uses states to manipulate case list array, for showing and filtering.\r\n\r\nthis.props.onCaseSelect(phone_case) function updates the chosen_phone_case\r\nproperty in App.js (state)\r\n\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\n\r\nclass CaseSelection extends Component {\r\n    /*class constructor */\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        /* App state*/\r\n        this.state = {\r\n            caseList: this.props.case_list,\r\n            searchString: ''\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* caseList - show/renders cases with background photo and button name/value*/}\r\n                {\r\n                this.props.case_list.filter((phone_case) => phone_case.toLowerCase().includes(this.props.searched.toLowerCase())).map((phone_case) => (\r\n                    <button className=\"displayCaseButton\"\r\n                    key={phone_case}\r\n                    value={phone_case}\r\n                    onClick={() => {this.props.onCaseSelect(phone_case); this.props.onClear(\"\")}}>\r\n                    <div className=\"cardBox\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-front\">\r\n                                <img src={'images/'+phone_case+'.png'} alt=\"\" className=\"displayCaseImage\"/>\r\n                            </div>\r\n                            <div className=\"card-back\">\r\n                                <p>{phone_case}</p> \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    </button>\r\n                    ))\r\n                }\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default CaseSelection\r\n","/*This component controls case search field*/\r\n\r\nimport React from 'react';\r\n\r\nfunction SeachControl(props) {\r\n    \r\n    return (\r\n        <div className=\"search-control\"> \r\n            <input\r\n            id=\"text-to-search\"\r\n             className=\"search-3d\"\r\n            onChange={props.onCaseSearch}\r\n            value={props.searched} \r\n            placeholder=\"Search Case...\"\r\n            style={{backgroundImage: \"url(images/search-icon.png)\",\r\n            backgroundRepeat: 'no-repeat'}}\r\n        />      \r\n        <button className=\"clearButton\" onClick={() => props.onClear(\"\")}>X</button>\r\n            \r\n        </div>\r\n        )\r\n    }\r\n\r\nexport default SeachControl\r\n","// other components import\r\nimport React, { Component } from 'react';\r\nimport Header from './components/Header'\r\nimport LoadControl from './components/LoadControl'\r\nimport ExportControl from './components/ExportControl'\r\nimport ResetControl from './components/ResetControl'\r\nimport Main3DView from './components/Main3DView'\r\nimport TextEngraving from './components/TextEngraving'\r\nimport CaseColourPicker from './components/CaseColourPicker'\r\nimport CaseSelection from './components/CaseSelection'\r\nimport SearchControl from './components/SearchControl'\r\n\r\nclass App extends Component {\r\n    /* Constructor */\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        /* App state*/\r\n        this.state = {\r\n            chosen_engraved_text: '',\r\n            case_search_string: '',\r\n            chosen_case_colour: '#44557E',\r\n            chosen_phone_case: 'iPhone-X',\r\n            chosen_export_3d_format: '',\r\n            chosen_3d_file_extension: '',\r\n            available_export_3d_formats: ['OBJ', 'GLB'],\r\n            available_case_models: ['iPhone-X', 'iPhone-8-Plus', 'iPhone-7', 'iPad-9.7', 'Galaxy-S10', 'Galaxy-S5', 'Pixel2XL'],\r\n        }\r\n\r\n        /* section to bind functions to local class context */\r\n        this.update3DExportFormat = this.update3DExportFormat.bind(this)\r\n        this.updateEngravingText = this.updateEngravingText.bind(this)\r\n        this.updateCaseColour = this.updateCaseColour.bind(this)\r\n        this.updateChosenCase = this.updateChosenCase.bind(this)\r\n        this.updateChosen3DFileToLoad = this.updateChosen3DFileToLoad.bind(this)\r\n        this.resetApp = this.resetApp.bind(this)\r\n        this.updateSearchString = this.updateSearchString.bind(this)\r\n        this.clearSearchString = this.clearSearchString.bind(this)\r\n\r\n    }\r\n    /* Updates chosen_export_3d_format App state property based on return\r\n     event target value*/\r\n    update3DExportFormat(e) {\r\n        this.setState({ chosen_export_3d_format: e.target.value })\r\n    }\r\n    /* Resets App to chosen default values (empty) */\r\n    resetApp() {\r\n        this.setState({\r\n            chosen_engraved_text: '',\r\n            case_search_string: '',\r\n            chosen_case_colour: '#44557E',\r\n            chosen_export_3d_format: '',\r\n            chosen_phone_case: 'iPhone-X',\r\n        })\r\n    }\r\n    // updates engraved text state property, based on return event target value\r\n    updateEngravingText(e) {\r\n        this.setState({ chosen_engraved_text: e.target.value })\r\n    }\r\n    // updates case colour state proiperty, based on return event target value\r\n    updateCaseColour(color) {\r\n        this.setState({ chosen_case_colour: color.hex })\r\n    }\r\n    // updates chose case state property, based on return event target value\r\n    updateChosenCase(e) {\r\n        this.setState({ chosen_phone_case: e })\r\n    }\r\n    // updates loaded 3D file file and extention state property, based on return event target value\r\n    updateChosen3DFileToLoad(file, fileExtension, color) {\r\n        this.setState({ chosen_phone_case: file })\r\n        this.setState({ chosen_3d_file_extension: fileExtension })\r\n        if (color === '#GGGGGG') {\r\n\r\n        }\r\n        else {\r\n            this.setState({ chosen_case_colour: color })\r\n        }\r\n    }\r\n    // updates case search string, based on return event target value\r\n    updateSearchString(e) {\r\n        this.setState({ case_search_string: e.target.value })\r\n    }\r\n    // clears case search string, based on return event target value\r\n    clearSearchString(e) {\r\n        this.setState({ case_search_string: e })\r\n    }\r\n\r\n    /* App JSX render section. Works together with index.css in\r\n     producing a layout (based on grid css*/\r\n    render() {\r\n        return (\r\n            <div className=\"app\" >\r\n                <Header />\r\n                <div className=\"top-controls\">\r\n                    <LoadControl on3DFileLoad={this.updateChosen3DFileToLoad}\r\n                        app_states={this.state}\r\n                    />\r\n\r\n                    <ExportControl\r\n                        export_3d_formats={this.state.available_export_3d_formats}\r\n                        chosen_3d_format={this.state.chosen_export_3d_format}\r\n                        on3DFormatSelect={this.update3DExportFormat}\r\n                        chosen_phone_case={this.state.chosen_phone_case}\r\n                        chosen_case_colour={this.state.chosen_case_colour}\r\n                    // app_states={this.state}\r\n                    />\r\n\r\n                    <ResetControl onResetApp={this.resetApp} />\r\n\r\n                    <SearchControl\r\n                        searched={this.state.case_search_string}\r\n                        onCaseSearch={this.updateSearchString}\r\n                        onClear={this.clearSearchString} />\r\n\r\n                </div>\r\n                <div className=\"view3d\">\r\n                    <CaseSelection\r\n                        onCaseSelect={this.updateChosenCase}\r\n                        case_list={this.state.available_case_models}\r\n                        searched={this.state.case_search_string}\r\n                        onClear={this.clearSearchString}\r\n                    />\r\n                    <Main3DView app_states={this.state} />\r\n                </div>\r\n                <div className=\"edit-controls\">\r\n                    <TextEngraving\r\n                        engraved={this.state.chosen_engraved_text}\r\n                        onEngraveTextChange={this.updateEngravingText}\r\n                    />\r\n                    <CaseColourPicker\r\n                        onCaseColourSelect={this.updateCaseColour}\r\n                        updated_case_colour={this.state.chosen_case_colour}\r\n                    />\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\n/* Export App */\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}