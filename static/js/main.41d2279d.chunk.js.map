{"version":3,"sources":["components/ExportControl.js","components/Header.js","components/LoadControl.js","components/ResetControl.js","components/DemoScene/index.js","components/Main3DView.js","components/TextEngraving.js","components/CaseColourPicker.js","components/CaseSelection.js","components/SearchControl.js","App.js","registerServiceWorker.js","index.js"],"names":["ExportControl","obj_text","lines","split","result","i","mtllib_line","usemtl_line","length","undefined","startsWith","data","obj_parse_pointer","this_pointer","file_name","hex","obj_info","is_empty","Object","entries","constructor","obj_file_name","mtl_file_name","material_name","endsWith","trim","zip","AdmZip","content","addFile","Buffer","alloc","mtl_content","rgb","props","chosen_case_colour","exec","r","parseInt","g","b","substr","file","File","toBuffer","type","FileSaver","saveAs","this","chosen_3d_format","handle_data_pointer","handle_data","obj_parse","chosen_phone_case","indexOf","obj_base64","atob","url","window","location","href","replace","fetch","then","response","text","alert","_this","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","onChange","on3DFormatSelect","value","style","backgroundImage","backgroundRepeat","export_3d_formats","map","format","key","ref","onClick","clickHandler","React","Component","Header","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","showMenu","bind","assertThisInitialized","closeMenu","event","_this2","preventDefault","setState","document","addEventListener","_this3","dropdownMenu","contains","target","removeEventListener","_this4","react_default","src","alt","element","LoadControl","fileExtension","mtl_parse","mtl_text","materials","next_name","next_color","substring","console","log","JSON","stringify","on_obj_load","e","btoa","obj_reader","step","on3DFileLoad","color","app_states","on_mtl_load","mtl_string","mtl_reader","colors","rgb_parts","j","Math","round","parseFloat","toString","handleFiles","files","mtl_ready","obj_ready","obj_order","mtl_order","name","pop","FileReader","onloadend","readAsText","react_file_reader_default","fileTypes","multipleFiles","base64","ResetControl","onResetApp","DemoScene","cameraPosition","THREE","groupRotation","scene","width","height","RenderInfo","assets_path","chosenPhoneCase","refs","resize","innerWidth","React3_default","mainCamera","antialias","shadowMapEnabled","alpha","fov","chosenCaseSize","aspect","near","far","position","lookAt","chosenCaseColor","castShadow","penumbra","intensity","shadowMapWidth","shadowMapHeight","rotation","chosenRotationX","chosenRotationY","build_default","model","objectLoadLogic","group","objectLabelDisplayLogic","Main3DView","getElementById","onZoomChange","onRotationXChange","onRotationYChange","id","min","max","displayed_3d_model_zoom_level","changeSize","components_DemoScene","displayed_3d_model_rotation_x","displayed_3d_model_rotation_y","changeRotationX","changeRotationY","TextEngraving","htmlFor","onEngraveTextChange","engraved","placeholder","CaseColourPicker","displayColorPicker","updated_case_colour","handleClick","handleClose","handleChange","styles","reactCSS","default","borderRadius","background","swatch","padding","boxShadow","display","cursor","popover","zIndex","cover","top","right","bottom","left","react_color_lib","disableAlpha","onChangeComplete","onCaseColourSelect","CaseSelection","caseList","case_list","searchString","filter","phone_case","toLowerCase","includes","searched","onCaseSelect","onClear","SeachControl","onCaseSearch","App","chosen_engraved_text","case_search_string","chosen_export_3d_format","chosen_3d_file_extension","available_export_3d_formats","available_case_models","update3DExportFormat","updateEngravingText","updateCaseColour","updateChosenCase","updateChosen3DFileToLoad","resetApp","updateSearchString","clearSearchString","updateDisplayed3DModelRotationX","updateDisplayed3DModelRotationY","updateDisplayed3DModelZoom","components_Header","components_LoadControl","components_ResetControl","SearchControl","components_CaseSelection","components_Main3DView","components_TextEngraving","components_CaseColourPicker","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App","URL","process","origin","concat","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.41d2279d.chunk.js","sourcesContent":["/*This component controls the 3D export format selection and export action.\nonChange={props.on3DFormatSelect} updates App.js chosen_export_3d_format value*/\n\nimport React from 'react';\nimport AdmZip from 'adm-zip'\nimport FileSaver from 'file-saver'\n// var AdmZip = require('adm-zip');\n\n\n\nclass ExportControl extends React.Component {\n    //constructor(props) {\n    //    super(props)\n    //}\n\n\n    // extracts the material library and the name of material used\n    // within the .obj file\n    // this is used in handle_data() function\n    obj_parse(obj_text) {\n\n        let lines = obj_text.split('\\n')\n\n        let result = {}\n        let i = 0\n        let mtllib_line = ''\n        let usemtl_line = ''\n\n        while (i < lines.length) {\n            while (i < lines.length) {\n                if (lines[i] === undefined) {\n                    break\n                }\n                if (lines[i].startsWith('mtllib')) {\n                    mtllib_line = lines[i]\n                    break\n                }\n                else {\n                    i++\n                    continue\n                }\n            }\n            if (mtllib_line !== -1) {\n                while (i < lines.length) {\n                    if (lines[i] === undefined) {\n                        break\n                    }\n                    if (lines[i].startsWith('usemtl')) {\n                        usemtl_line = lines[i]\n                        break\n                    }\n                    else {\n                        i++\n                        continue\n                    }\n                }\n            }\n            else {\n                break\n            }\n            if (mtllib_line.length !== 0 && usemtl_line.length !== 0) {\n                result['mtllib_line'] = mtllib_line\n                result['usemtl_line'] = usemtl_line\n                return result\n            }\n            else {\n                return result\n            }\n        }\n        return result\n    }\n\n    handle_data(data, obj_parse_pointer, this_pointer, file_name) {\n\n        let obj_info = obj_parse_pointer(data)\n\n        // console.log(obj_info)\n\n        let is_empty = Object.entries(obj_info).length === 0 && obj_info.constructor === Object\n\n        // prepare files to be exported (obj and mtl placeholders)\n        let obj_file_name = file_name\n        let mtl_file_name = ''\n        let material_name = ''\n\n        // form the obj file name\n        if (!obj_file_name.endsWith('.obj')) {\n            obj_file_name = obj_file_name + '.obj'\n        }\n\n        //convert the hex colour tracked by the App.js (chosen_case_colour)\n        // to RGB space, as .mtl file only hold the material colour\n        // as RGB colour\n        function hexToRgb(hex) {\n            var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n            return result ? {\n                r: parseInt(result[1], 16),\n                g: parseInt(result[2], 16),\n                b: parseInt(result[3], 16)\n            } : null;\n        }\n\n        // if we dont have an mtl file, we need to create one\n        // this entire function is to:\n        // - create the mtl file structure\n        // - create a zip file\n        // - load both mtl and obj files into zip\n        // - save the files using FileSaver module to user file system\n\n        // if we have an obj file and is not empty (protection agains empty download)\n        if (!is_empty) {\n            // console.log(obj_info.mtllib_line)\n            // console.log(obj_info.usemtl_line)\n            // console.log(this_pointer.props.chosen_case_colour)\n\n            // prep the file naming of obj and mtl files\n            // based on obj files lines containing reference to material and\n            // material library used (research obj file format for understanding)\n            mtl_file_name = obj_info.mtllib_line.split('mtllib')[1].trim()\n            material_name = obj_info.usemtl_line.split('usemtl')[1].trim()\n\n            // prepare zip object\n            var zip = new AdmZip();\n\n            // prepare and append .obj file\n            var content = data;\n            zip.addFile(obj_file_name, Buffer.alloc(content.length, content), \"\");\n\n            // create new .mtl file to accompany .obj file\n            // .mtl file we use App.js chose_case_colour property\n            // as converted to rgb\n            let mtl_content = ''\n            mtl_content += 'newmtl '\n            mtl_content += material_name\n            mtl_content += '\\n'\n            mtl_content += 'Ns 225.000000\\n'\n            mtl_content += 'Ka 1.000000 1.000000 1.000000\\n'\n            mtl_content += 'Kd '//0.800000 0.777799 0.285769\\n'\n            let rgb = hexToRgb(this_pointer.props.chosen_case_colour)\n            mtl_content += ('' + rgb.r / 255).substr(0, 8)\n            mtl_content += ' '\n            mtl_content += ('' + rgb.g / 255).substr(0, 8)\n            mtl_content += ' '\n            mtl_content += ('' + rgb.b / 255).substr(0, 8)\n            mtl_content += '\\n'\n            mtl_content += 'Ks 0.500000 0.500000 0.500000\\n'\n            mtl_content += 'Ke 0.0 0.0 0.0\\n'\n            mtl_content += 'Ni 1.450000\\n'\n            mtl_content += 'd 1.000000\\n'\n            mtl_content += 'illum 2\\n'\n\n            // add .mtl file to zip\n            zip.addFile(mtl_file_name, Buffer.alloc(mtl_content.length, mtl_content), \"\")\n\n            // create a file to save as zip file\n            // var FileSaver = require('file-saver');\n            var file = new File([zip.toBuffer()], \"inkerz_exported_3d_model.zip\", { type: \"text/plain;charset=utf-8\" });\n\n            // save it to user's default download location (please note: not prompt is supplied)\n            FileSaver.saveAs(file);\n\n        }\n\n    }\n    // when user click to export/save the edited 3D model to local file system\n    clickHandler() {\n        // exoport is restricted to .obj file type (until more 3d file exporters are developed)\n        if (this.props.chosen_3d_format === 'OBJ') {\n\n            var obj_text = ''\n\n            var handle_data_pointer = this.handle_data\n            var obj_parse_pointer = this.obj_parse\n            var this_pointer = this\n\n            // if we canread the base64 model ascii phone case data (obj URI encoded)\n            // as stored in App.js chosen_phone_case property\n            if (this.props.chosen_phone_case.indexOf(\"base64\") > 0) {\n                // read the pure ascii (removing the header)\n                let obj_base64 = this.props.chosen_phone_case.split('base64,')[1]\n                // convert the text to object type (ascii to binary)\n                obj_text = atob(obj_base64)\n                // send it off to be handled via handle_data() function\n                handle_data_pointer(obj_text, obj_parse_pointer, this_pointer, 'model.obj')\n            }\n            else {\n                // otherwise, as not having the ascii version of object file means we have just loded the obj file from\n                // server, we need to fetch said server data (in our case our own url, where the assets are)\n                let url = window.location.href.replace(/[^/]*$/, '') // remove any html files after directory\n                // console.log(\"URL is\", url)\n                url = url + '/assets/' + this.props.chosen_phone_case + \".obj\"\n                // let url = window.location.protocol + '//' + window.location.host + window.location.pathname + '/assets/' + this.props.chosen_phone_case + \".obj\"\n                //console.log(\"url is\", url)\n                //console.log(\"pathname\", window.location.pathname)\n                // fetch is used \n                fetch(url)\n                    .then(function (response) {\n                        //to extract the text from it\n                        return response.text();\n                    })\n                    .then(function (data) {\n                        // send for post processing and download \n                        handle_data_pointer(data, obj_parse_pointer, this_pointer, this_pointer.props.chosen_phone_case)\n                    })\n            }\n        }\n        else {\n            alert(\"Export format currently not supported!\")\n        }\n\n    }\n    render() {\n        return (\n            <div className=\"export-control\">\n                <select className=\"select-3d\" onChange={this.props.on3DFormatSelect} value={this.props.chosen_3d_format} style={{\n                    backgroundImage: \"url(images/select-arrow.png)\",\n                    backgroundRepeat: 'no-repeat'\n                }}>\n                    <option value=\"\">Export Format</option>\n                    {this.props.export_3d_formats.map((format) => (\n                        <option key={format} value={format} >.{format}</option>\n                    ))}\n                </select>\n                <button ref=\"download\" className=\"exportButton\" onClick={() => this.clickHandler()}>Export 3D Model</button>\n\n            </div>\n        )\n    }\n}\n\nexport default ExportControl\n","/*THis componenet renders vanilla header with logo and links \n\nDrop down menu for small screen devices uses this example\nhttps://blog.campvanilla.com/reactjs-dropdown-menus-b6e06ae3a8fe\nand is modified\n*/\n\nimport React from 'react';\n\nclass Header extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      showMenu: false,\n    };\n\n    this.showMenu = this.showMenu.bind(this);\n    this.closeMenu = this.closeMenu.bind(this);\n  }\n\n  showMenu(event) {\n    event.preventDefault();\n    this.setState({ showMenu: true }, () => {\n      document.addEventListener('click', this.closeMenu);\n    });\n  }\n\n  closeMenu(event) {\n    if (!this.dropdownMenu.contains(event.target)) {\n      this.setState({ showMenu: false }, () => {\n        document.removeEventListener('click', this.closeMenu);\n      });\n\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"header\">\n        <div className=\"logo\">\n          <img src=\"images/logo_white.png\" alt=\"Inkerz Logo\" className=\"logoImage\"></img>\n        </div>\n\n        <div className=\"nav-links\">\n          <a href=\"index.html\">3D MODELER</a>\n          <a href=\"https://inkerz.com\">WHY INKERZ?</a>\n          <a href=\"https://inkerz.com/contact/\">CONTACT</a>\n        </div>\n\n        <div className=\"menu-division\">\n          <img src=\"images/logo_white.png\" alt=\"Inkerz Logo\" className=\"menuLogoImage\"></img>\n          <button\n            className=\"menu-button\"\n            onClick={this.showMenu}\n            style={{ backgroundImage: \"url(images/menu-icon.png)\", backgroundRepeat: 'no-repeat' }}>\n          </button>\n          {\n            this.state.showMenu\n              ? (\n                <div\n                  className=\"menu\"\n                  ref={(element) => { this.dropdownMenu = element; }}>\n                  <a href=\"index.html\">\n                    <button className=\"menuItem\">3D MODELER</button>\n                  </a>\n                  <a href=\"https://inkerz.com\">\n                    <button className=\"menuItem\">WHY INKERZ?</button>\n                  </a>\n                  <a href=\"https://inkerz.com/contact/\">\n                    <button className=\"menuItem\">CONTACT</button>\n                  </a>\n                </div>\n              )\n              : (\n                null\n              )\n          }\n        </div>\n\n      </div>\n    );\n  }\n}\n\n\n\nexport default Header\n","/*This component controls the 3D file loading. */\n\nimport React, { Component } from 'react'\nimport ReactFileReader from 'react-file-reader'\n\nclass LoadControl extends Component {\n\n    state = {\n        file: \"\",\n        fileExtension: \"\"\n    }\n\n    // this function extract the colour from the loded mtl file\n    // parsing all lines, effectively\n    // parsing each line fromm the mtl file format, finding\n    // newmtl file: material statement\n    // Kd line : color statement\n    // see: http://paulbourke.net/dataformats/mtl/\n    mtl_parse = mtl_text => {\n\n        let lines = mtl_text.split('\\n')\n\n        let materials = {}\n\n        let i = 0\n        let next_name = ''\n        let next_color = ''\n\n        while (i < lines.length) {\n            while (i < lines.length) {\n                if (lines[i] === undefined) {\n                    break\n                }\n                if (lines[i].startsWith('newmtl')) {\n                    next_name = lines[i].substring(6).trim()\n                    break\n                }\n                else {\n                    i++\n                    continue\n                }\n            }\n            if (next_name.length !== 0) {\n                while (i < lines.length) {\n                    if (lines[i] === undefined) {\n                        break\n                    }\n                    if (lines[i].startsWith('Kd')) {\n                        next_color = lines[i].substring(2).trim()\n                        break\n                    }\n                    else {\n                        i++\n                        continue\n                    }\n                }\n            }\n            else {\n                i++\n                continue\n            }\n            if (next_name.length !== 0 && next_color.length !== 0) {\n                materials[next_name] = next_color + ''\n                next_name = ''\n                next_color = ''\n                i++\n                continue\n            }\n            else {\n                i++\n                continue\n            }\n        }\n        console.log(JSON.stringify(materials))\n        return materials\n    }\n\n    // this function load the dataURI base64 string and forms the complete\n    // file definition, to be loaded into App.js on3DFileLoad() bound function\n    // note: file extension is fixed currently to obj.\n    on_obj_load = e => {\n\n        this.file = 'data:application/octet-stream;base64,' + btoa(this.obj_reader.result)\n        this.fileExtension = 'obj'\n\n        this.step = this.step + 1\n\n        //this\n        if (this.step >= 2) {\n            this.props.on3DFileLoad(this.file, this.fileExtension, this.color) //load file upstream to App.js \n        } else {\n            this.props.on3DFileLoad(this.file, this.fileExtension, this.props.app_states.chosen_case_colour) //load file upstream to App.js \n        }\n    }\n\n    // this function uses the result of read in mtl file read in and \n    // for colour and converts it to hex colour (as mtl file contains rgb colour definition)\n    // to be sent upstream to App.js on3DFileLoad() bound function together with state of the file\n    // and file extention\n    on_mtl_load = e => {\n\n        var mtl_string = this.mtl_reader.result\n\n        //var this_pointer = this\n\n\n        // console.log('mtl_string: ' + mtl_string)\n\n        let colors = this.mtl_parse(mtl_string)\n\n        let is_empty = Object.entries(colors).length === 0 && colors.constructor === Object\n\n        let color = '#'\n\n        if (!is_empty) {\n            let rgb = Object.entries(colors)[0][1]\n            let rgb_parts = rgb.split(' ')\n            for (let j = 0; j < 3; j++) {\n                color += (Math.round(parseFloat(rgb_parts[j].trim()) * 255) % 256).toString(16)\n            }\n        }\n        else {\n            color = '#000000'\n        }\n\n        this.color = color\n\n        console.log('handleFiles: ' + color)\n\n\n        this.step = this.step + 1\n\n        //this\n        if (this.step >= 2) {\n            this.props.on3DFileLoad(this.file, this.fileExtension, this.color) //load file upstream to App.js \n        }\n    }\n    \n    // function to handle files when user loads the files\n    handleFiles = files => {\n        this.step = 0\n        this.file = ''\n        this.fileExtension = ''\n        this.color = ''\n\n        var mtl_ready = false\n        var obj_ready = false\n        var obj_order = -1\n        var mtl_order = -1\n\n        // currently we expect both .mtl and .obj files\n        if (files.length < 2) {\n            //var color = '#'\n            // each file is parswed to identifyy extention and make them marked as ready\n            for (let i = 0; i < files.length; i++) {\n                // console.log(files[i].name)\n                // console.log(files[i].name.split('.').pop() === 'mtl' && !mtl_ready)\n                // console.log(files[i].name.split('.').pop() === 'obj' && !obj_ready)\n                if (files[i].name.split('.').pop() === 'obj' && !obj_ready) {\n                    // console.log('obj: ' + files[i].name)\n                    //console.log(files[i].base64[i]) /* remove just for logging */\n                    obj_order = i;\n                    obj_ready = true;\n                    alert(\".mtl file has not been loaded, using default material\")\n                    continue\n                } else {\n                    alert(\"Unsupported file detected\")\n                }\n            }\n\n            this.obj_reader = new FileReader();\n            this.obj_reader.onloadend = this.on_obj_load\n            this.obj_reader.readAsText(files[obj_order])\n        }\n        // if both supplied, process both files (encoding obj file into stream base 64 \n        // and extract material reference and colour from mtl file)\n        else {\n            //var color = '#'\n            // each file is parswed to identifyy extention and make them marked as ready\n            for (let i = 0; i < files.length; i++) {\n                // console.log(files[i].name)\n                // console.log(files[i].name.split('.').pop() === 'mtl' && !mtl_ready)\n                // console.log(files[i].name.split('.').pop() === 'obj' && !obj_ready)\n                if (files[i].name.split('.').pop() === 'obj' && !obj_ready) {\n                    // console.log('obj: ' + files[i].name)\n                    //console.log(files[i].base64[i]) /* remove just for logging */\n                    obj_order = i;\n                    obj_ready = true;\n                    continue\n                }\n                if (files[i].name.split('.').pop() === 'mtl' && !mtl_ready) {\n                    // console.log('mtl: ' + files[i].name)\n                    mtl_order = i;\n                    mtl_ready = true;\n                }\n            }\n            // once both files are reqady, they are read in\n            this.mtl_reader = new FileReader();\n            this.obj_reader = new FileReader();\n            // object encoding into base64 stream, and mtl extraction of \n            // material and colour\n            // this is triggered using the FileLoader ability to\n            // load the function on \"onloadend\" trigger event\n            //  files as stepped loaded in (.mtl then .obj), read in as text (ascii)\n            // then sent off for processing via on_mtl_load and obj_load functions\n            this.mtl_reader.onloadend = this.on_mtl_load\n            this.obj_reader.onloadend = this.on_obj_load\n            this.mtl_reader.readAsText(files[mtl_order])\n            this.obj_reader.readAsText(files[obj_order])\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"load-control\">\n                <ReactFileReader fileTypes={[\".obj\", \".json\", \".mtl\"]} multipleFiles={true} base64={false} handleFiles={this.handleFiles}>\n                    <button className=\"loadButton\">Load 3D Model</button>\n                </ReactFileReader>\n            </div >\n        )\n    }\n}\n\nexport default LoadControl\n","/* This componenet resets all the relevant values modified by the user\nreseting the modifiable values in App.js (states) */\n\nimport React from 'react';\n\nfunction ResetControl(props) {\n    return (\n\n        <div className=\"reset-control\">\n            <button className=\"resetButton\" onClick={props.onResetApp}>Reset</button>\n        </div>\n    )\n}\n\nexport default ResetControl\n","/* This component renders case 3D object\n\nIt uses number of modules for Threejs to make it ewasier to\nintegrate React and ThrreJS, namely react-three-renderer as\nfor rendering and react-three-renderer-objects for object loading\n\n*/\n\nimport * as THREE from \"three\";\nimport React from \"react\";\nimport React3 from \"react-three-renderer\";\nimport ObjectModel from 'react-three-renderer-objects';\n\n\nclass DemoScene extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cameraPosition: new THREE.Vector3(0, 300, 750),\n      groupRotation: new THREE.Euler(0, 0, 0),\n      scene: {},\n      width: 500,\n      height: 400,\n      RenderInfo: \"\",\n      assets_path: \"assets/\"\n    }\n    // this.objectLoadLogic = this.objectLoadLogic.bind()\n  }\n\n  objectLoadLogic() {\n    // if we detect an object as string, with substring base64, then load it as is\n    if (this.props.chosenPhoneCase.indexOf(\"base64\") > 0) {\n      return this.props.chosenPhoneCase\n    }\n    // otherwise we need to load it from file system, \n    // including the full asset path under public/assets folder\n    else {\n      return (this.state.assets_path + this.props.chosenPhoneCase + \".obj\")\n    }\n  }\n\n  objectLabelDisplayLogic() {\n    // if we detect an object as string, with substring base64, mark it with\n    // laber of customer loaded\n    if (this.props.chosenPhoneCase.indexOf(\"base64\") > 0) {\n      return \"Customer\"\n    }\n    // otherwise we need to load it from file system, \n    // including the full asset path under public/assets folder\n    // label it as such\n    else {\n      return this.props.chosenPhoneCase\n    }\n  }\n\n  /* when component mounts (renders), we set thescene and track the \n  window resize */\n  componentDidMount() {\n    let { scene } = this.refs;\n    this.setState({ scene });\n    //detect window resiez and perform resize function\n\n    this.resize();\n\n    window.addEventListener(\"resize\", this.resize.bind(this));\n  }\n\n  resize() {\n\n    if (window.innerWidth < 640) {\n      //adjust render size\n      this.setState({ width: window.innerWidth * 0.7 });\n      this.setState({ height: 300 });\n    } else {\n      //adjust render size\n      this.setState({ width: window.innerWidth - 350 });\n      this.setState({ height: 400 });\n    }\n  }\n\n  // This is the react rendering the 3D object\n  render() {\n    return (\n      <div>\n        <React3\n          mainCamera=\"camera\"\n          antialias\n          shadowMapEnabled\n          width={this.state.width}\n          height={this.state.height}\n          alpha={true}\n        >\n          <scene ref=\"scene\">\n            <perspectiveCamera\n              key={`perspectiveCamera`}\n              name=\"camera\"\n              fov={parseInt(this.props.chosenCaseSize, 10)}\n              aspect={this.state.width / this.state.height}\n              near={0.1}\n              far={1000}\n              position={this.state.cameraPosition}\n              lookAt={new THREE.Vector3(0, 0, 0)}\n            />\n            <group>\n              <spotLight\n                key={`Light 1`}\n                color={this.props.chosenCaseColor}\n                position={new THREE.Vector3(0, 300, 0)}\n                lookAt={new THREE.Vector3(0, 0, 0)}\n                castShadow\n                penumbra={2}\n                intensity={0.2}\n                shadowMapWidth={10240}\n                shadowMapHeight={10240}\n              />\n\n              <directionalLight\n                key={`Light 2`}\n                color={this.props.chosenCaseColor}\n                position={new THREE.Vector3(0, 500, 100)}\n                lookAt={new THREE.Vector3(0, 0, 0)}\n                intensity={0.5}\n              />\n\n              <spotLight\n                key={`Light 3`}\n                color={this.props.chosenCaseColor}\n                position={new THREE.Vector3(0, 100, 2000)}\n                lookAt={new THREE.Vector3(0, 0, 0)}\n                intensity={0.35}\n              />\n\n              <spotLight\n                key={`Light 4`}\n                color={this.props.chosenCaseColor}\n                position={new THREE.Vector3(-500, 0, 500)}\n                lookAt={new THREE.Vector3(0, 0, 0)}\n                intensity={0.1}\n              />\n\n              <spotLight\n                key={`Light 5`}\n                color={this.props.chosenCaseColor}\n                position={new THREE.Vector3(500, 0, 500)}\n                lookAt={new THREE.Vector3(0, 0, 0)}\n                intensity={0.1}\n              />\n\n              <spotLight\n                key={`Light 6`}\n                color={this.props.chosenCaseColor}\n                position={new THREE.Vector3(-500, 450, 500)}\n                lookAt={new THREE.Vector3(0, 0, 0)}\n                intensity={0.375}\n              />\n\n              <spotLight\n                key={`Light 7`}\n                color={this.props.chosenCaseColor}\n                position={new THREE.Vector3(500, 450, 500)}\n                lookAt={new THREE.Vector3(0, 0, 0)}\n                intensity={0.375}\n              />\n            </group>\n\n            <group name=\"objGroup\" rotation={new THREE.Euler(this.props.chosenRotationX, this.props.chosenRotationY, 0)}\n              //change key when model changes so that it gets re-rendered\n              key={this.props.chosenPhoneCase}>\n              <ObjectModel\n                name=\"exampleObject\"\n                //this is the model we are rendering\n                model={this.objectLoadLogic()}\n                scene={this.state.scene}\n                group=\"objGroup\"\n              />\n              {/* {console.log(\"model is:\", this.objectLoadLogic())} */}\n            </group>\n          </scene>\n        </React3>\n        <div className=\"renderDescription\">\n          <p>{\"Rendering \" + this.objectLabelDisplayLogic() + \" Model\"}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default DemoScene;\n","/* This compoenet (a class) is used as wrapping control section for rotation\nand zooming 3D object controls.\n\nIt paseses the required states from App.js to DemoScene.js (component)\nto render the 3D object\n\n*/\n\nimport React from 'react';\nimport DemoScene from './DemoScene';\n\nclass Main3DView extends React.Component {\n\n    changeSize() {\n        let value = document.getElementById(\"caseSizeRange\").value\n        this.props.onZoomChange(value)\n    }\n\n    changeRotationX() {\n        let value = document.getElementById(\"rotationXRange\").value\n        this.props.onRotationXChange(value)\n    }\n\n    changeRotationY() {\n        let value = document.getElementById(\"rotationYRange\").value\n        this.props.onRotationYChange(value)\n    }\n\n    render() {\n        return (\n            <div className=\"main3D\">\n                <br></br>\n                <div className=\"fileViewerLine\">\n                    <div className=\"caseSize\">\n\n                        <p className=\"whiteText\">\n\n                            Z<br />\n                            O<br />\n                            O<br />\n                            M<br />\n                        </p>\n\n                        <div className=\"rangeDiv\">\n                            <input type=\"range\" id=\"caseSizeRange\" min=\"1\" max=\"50\" step=\"1\" value={this.props.app_states.displayed_3d_model_zoom_level} onChange={() => this.changeSize()} />\n                        </div>\n                    </div>\n                    <div className=\"fileViewer\" style={{ backgroundImage: \"url(images/model-background.png)\", backgroundRepeat: 'no-repeat' }}>\n\n                        <DemoScene\n                            chosenCaseColor={this.props.app_states.chosen_case_colour}\n                            chosenCaseSize={this.props.app_states.displayed_3d_model_zoom_level}\n                            chosenRotationX={this.props.app_states.displayed_3d_model_rotation_x}\n                            chosenRotationY={this.props.app_states.displayed_3d_model_rotation_y}\n                            chosenPhoneCase={this.props.app_states.chosen_phone_case}\n                        />\n                    </div>\n\n                    <div className=\"rotationX\">\n\n                        <div className=\"rangeDiv\">\n                            <input type=\"range\" id=\"rotationXRange\" min=\"-3\" max=\"3\" step=\"0.1\" value={this.props.app_states.displayed_3d_model_rotation_x} onChange={() => this.changeRotationX()} />\n                        </div>\n                        <p className=\"whiteText\">\n\n                            R<br />\n                            O<br />\n                            T<br />\n                            A<br />\n                            T<br />\n                            E<br />\n                        </p>\n                    </div>\n\n                </div>\n\n                <div className=\"rotationY\">\n                    <input type=\"range\" id=\"rotationYRange\" min=\"-3\" max=\"3\" step=\"0.1\" value={this.props.app_states.displayed_3d_model_rotation_y} onChange={() => this.changeRotationY()}></input>\n\n                    <p className=\"whiteText\">ROTATE</p>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default Main3DView\n","/* This component controls the input of the engraving text for the chosen case.\n onChange={props.onEngraveTextChange} updates the chosen_engraved_text in App.js*/\n\nimport React from 'react';\n\nfunction TextEngraving(props) {\n    return (\n        <div>\n            <div>\n                <label htmlFor=\"text-to-engrave\">\n                    <p className=\"whiteText\">What to engrave into case?</p>\n                </label>\n                <input\n                    id=\"text-to-engrave\"\n                    className=\"engrave-3d\"\n                    onChange={props.onEngraveTextChange}\n                    value={props.engraved} placeholder=\"Text to Engrave...\"\n                />\n            </div>\n        </div>\n    )\n\n}\n\nexport default TextEngraving\n","/*This component embeds the colour wheen into the page (color-picker module). \nonChangeComplete={props.onCaseColourSelect} updates the chosen_case_colour state\nback to App.js*/\n\n/* example take from https://casesandberg.github.io/react-color/ and modified*/\n\nimport React from 'react'\nimport reactCSS from 'reactcss'\nimport { ChromePicker } from 'react-color'\n\nclass CaseColourPicker extends React.Component {\n    state = {\n        displayColorPicker: false,\n        color: this.props.updated_case_colour\n    };\n\n    handleClick = () => {\n        this.setState({ displayColorPicker: !this.state.displayColorPicker })\n    };\n\n    handleClose = () => {\n        this.setState({ displayColorPicker: false })\n    };\n\n    handleChange = (color) => {\n        this.setState({\n            color: color\n        })\n\n    };\n\n    render() {\n\n        const styles = reactCSS({\n            'default': {\n                color: {\n                    width: '30px',\n                    height: '14px',\n                    borderRadius: '2px',\n                    background: this.props.updated_case_colour,\n                },\n                swatch: {\n                    padding: '5px',\n                    background: '#fff',\n                    borderRadius: '1px',\n                    boxShadow: '0 0 0 1px rgba(0,0,0,.1)',\n                    display: 'inline-block',\n                    cursor: 'pointer',\n                },\n                popover: {\n                    position: 'absolute',\n                    zIndex: '2',\n                },\n                cover: {\n                    position: 'fixed',\n                    top: '0px',\n                    right: '0px',\n                    bottom: '0px',\n                    left: '0px',\n                },\n            },\n        });\n\n        return (\n            <div>\n                <p className=\"whiteText\">Select Case Colour:</p>\n                <div style={styles.swatch} onClick={this.handleClick}>\n                    <div style={styles.color} />\n                </div>\n                {this.state.displayColorPicker ? <div style={styles.popover}>\n                    <div style={styles.cover} onClick={this.handleClose} />\n                    <ChromePicker\n                        disableAlpha={true}\n                        width=\"190px\"\n                        onChange={this.handleChange}\n                        color={this.props.updated_case_colour}\n                        onChangeComplete={this.props.onCaseColourSelect}\n                    >\n                    </ChromePicker>\n                </div> : null}\n\n            </div>\n        )\n    }\n}\n\nexport default CaseColourPicker\n","/* This compoenet (a class) uses case list (available_case_models)\nfrom App.js in building a searchable text input, for user to find\na case to model.\n\nIt uses states to manipulate case list array, for showing and filtering.\n\nthis.props.onCaseSelect(phone_case) function updates the chosen_phone_case\nproperty in App.js (state)\n\n*/\n\nimport React, { Component } from 'react';\n\nclass CaseSelection extends Component {\n    /*class constructor */\n    constructor(props) {\n        super(props)\n\n        /* App state*/\n        this.state = {\n            caseList: this.props.case_list,\n            searchString: ''\n        }\n    }\n    \n    render() {\n        return (\n            <div>\n                {/* caseList - show/renders cases with background photo and button name/value*/}\n                {\n                this.props.case_list.filter((phone_case) => phone_case.toLowerCase().includes(this.props.searched.toLowerCase())).map((phone_case) => (\n                    <button className=\"displayCaseButton\"\n                    key={phone_case}\n                    value={phone_case}\n                    onClick={() => {this.props.onCaseSelect(phone_case); this.props.onClear(\"\")}}>\n                    <div className=\"cardBox\">\n                        <div className=\"card\">\n                            <div className=\"card-front\">\n                                <img src={'images/'+phone_case+'.png'} alt=\"\" className=\"displayCaseImage\"/>\n                            </div>\n                            <div className=\"card-back\">\n                                <p>{phone_case}</p> \n                            </div>\n                        </div>\n                    </div>\n                    </button>\n                    ))\n                }\n            </div >\n        )\n    }\n}\n\nexport default CaseSelection\n","/*This component controls case search field*/\n\nimport React from 'react';\n\nfunction SeachControl(props) {\n    \n    return (\n        <div className=\"search-control\"> \n            <input\n            id=\"text-to-search\"\n             className=\"search-3d\"\n            onChange={props.onCaseSearch}\n            value={props.searched} \n            placeholder=\"Search Case...\"\n            style={{backgroundImage: \"url(images/search-icon.png)\",\n            backgroundRepeat: 'no-repeat'}}\n        />      \n        <button className=\"clearButton\" onClick={() => props.onClear(\"\")}>X</button>\n            \n        </div>\n        )\n    }\n\nexport default SeachControl\n","// other components import\nimport React, { Component } from 'react';\nimport Header from './components/Header'\nimport LoadControl from './components/LoadControl'\nimport ExportControl from './components/ExportControl'\nimport ResetControl from './components/ResetControl'\nimport Main3DView from './components/Main3DView'\nimport TextEngraving from './components/TextEngraving'\nimport CaseColourPicker from './components/CaseColourPicker'\nimport CaseSelection from './components/CaseSelection'\nimport SearchControl from './components/SearchControl'\n\nclass App extends Component {\n    /* Constructor */\n    constructor(props) {\n        super(props)\n\n        /* App state*/\n        this.state = {\n            chosen_engraved_text: '',\n            case_search_string: '',\n            chosen_case_colour: '#44557E',\n            chosen_phone_case: 'iPhone-X',\n            chosen_export_3d_format: '',\n            chosen_3d_file_extension: '',\n            displayed_3d_model_rotation_x: 0,\n            displayed_3d_model_rotation_y: 0,\n            displayed_3d_model_zoom_level: 20,\n            available_export_3d_formats: ['OBJ', 'GLB'],\n            available_case_models: ['iPhone-X', 'iPhone-8-Plus', 'iPhone-7', 'iPad-9.7', 'Galaxy-S10', 'Galaxy-S5', 'Pixel2XL'],\n        }\n\n        /* section to bind functions to local class context */\n        this.update3DExportFormat = this.update3DExportFormat.bind(this)\n        this.updateEngravingText = this.updateEngravingText.bind(this)\n        this.updateCaseColour = this.updateCaseColour.bind(this)\n        this.updateChosenCase = this.updateChosenCase.bind(this)\n        this.updateChosen3DFileToLoad = this.updateChosen3DFileToLoad.bind(this)\n        this.resetApp = this.resetApp.bind(this)\n        this.updateSearchString = this.updateSearchString.bind(this)\n        this.clearSearchString = this.clearSearchString.bind(this)\n        this.updateDisplayed3DModelRotationX = this.updateDisplayed3DModelRotationX.bind(this)\n        this.updateDisplayed3DModelRotationY = this.updateDisplayed3DModelRotationY.bind(this)\n        this.updateDisplayed3DModelZoom = this.updateDisplayed3DModelZoom.bind(this)\n\n    }\n    /* Updates chosen_export_3d_format App state property based on return\n     event target value*/\n    update3DExportFormat(e) {\n        this.setState({ chosen_export_3d_format: e.target.value })\n    }\n    /* Resets App to chosen default values (empty) */\n    resetApp() {\n        this.setState({\n            chosen_engraved_text: '',\n            case_search_string: '',\n            chosen_case_colour: '#44557E',\n            chosen_export_3d_format: '',\n            chosen_phone_case: 'iPhone-X',\n            displayed_3d_model_rotation_x: 0,\n            displayed_3d_model_rotation_y: 0,\n            displayed_3d_model_zoom_level: 20,\n        })\n    }\n    // updates engraved text state property, based on return event target value\n    updateEngravingText(e) {\n        this.setState({ chosen_engraved_text: e.target.value })\n    }\n    // updates case colour state proiperty, based on return event target value\n    updateCaseColour(color) {\n        this.setState({ chosen_case_colour: color.hex })\n    }\n    // updates chose case state property, based on return event target value\n    updateChosenCase(e) {\n        this.setState({ chosen_phone_case: e })\n    }\n    // updates loaded 3D file file and extention state property, based on return event target value\n    updateChosen3DFileToLoad(file, fileExtension, color) {\n        this.setState({ chosen_phone_case: file })\n        this.setState({ chosen_3d_file_extension: fileExtension })\n        if (color === '#GGGGGG') {\n\n        }\n        else {\n            this.setState({ chosen_case_colour: color })\n        }\n    }\n    // updates case search string, based on return event target value\n    updateSearchString(e) {\n        this.setState({ case_search_string: e.target.value })\n    }\n    // clears case search string, based on return event target value\n    clearSearchString(e) {\n        this.setState({ case_search_string: e })\n    }\n    // updates 3D model rotationX values\n    updateDisplayed3DModelRotationX(value) {\n        this.setState({\n            displayed_3d_model_rotation_x: value\n        })\n    }\n    // updates 3D model rotationY values\n    updateDisplayed3DModelRotationY(value) {\n        this.setState({\n            displayed_3d_model_rotation_y: value\n        })\n    }\n    // updates 3D model Zoom values\n    updateDisplayed3DModelZoom(value) {\n        this.setState({\n            displayed_3d_model_zoom_level: value\n        })\n    }\n\n    /* App JSX render section. Works together with index.css in\n     producing a layout (based on grid css*/\n    render() {\n        return (\n            <div className=\"app\" >\n                <Header />\n                <div className=\"top-controls\">\n                    <LoadControl on3DFileLoad={this.updateChosen3DFileToLoad}\n                        app_states={this.state}\n                    />\n\n                    <ExportControl\n                        export_3d_formats={this.state.available_export_3d_formats}\n                        chosen_3d_format={this.state.chosen_export_3d_format}\n                        on3DFormatSelect={this.update3DExportFormat}\n                        chosen_phone_case={this.state.chosen_phone_case}\n                        chosen_case_colour={this.state.chosen_case_colour}\n                    // app_states={this.state}\n                    />\n\n                    <ResetControl onResetApp={this.resetApp} />\n\n                    <SearchControl\n                        searched={this.state.case_search_string}\n                        onCaseSearch={this.updateSearchString}\n                        onClear={this.clearSearchString} />\n\n                </div>\n                <div className=\"view3d\">\n                    <CaseSelection\n                        onCaseSelect={this.updateChosenCase}\n                        case_list={this.state.available_case_models}\n                        searched={this.state.case_search_string}\n                        onClear={this.clearSearchString}\n                    />\n\n                    <Main3DView\n                        app_states={this.state}\n                        onRotationXChange={this.updateDisplayed3DModelRotationX}\n                        onRotationYChange={this.updateDisplayed3DModelRotationY}\n                        onZoomChange={this.updateDisplayed3DModelZoom} />\n                </div>\n                <div className=\"edit-controls\">\n                    <TextEngraving\n                        engraved={this.state.chosen_engraved_text}\n                        onEngraveTextChange={this.updateEngravingText}\n                    />\n                    <CaseColourPicker\n                        onCaseColourSelect={this.updateCaseColour}\n                        updated_case_colour={this.state.chosen_case_colour}\n                    />\n                </div>\n            </div >\n        );\n    }\n}\n\n/* Export App */\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}